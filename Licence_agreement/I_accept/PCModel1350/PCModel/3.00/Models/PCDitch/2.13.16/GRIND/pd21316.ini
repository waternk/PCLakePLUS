defpermanent aDayInitVeg 367
defpermanent bDayInitPhra 367
defpermanent aDepthStart 0
bPorS = (1.0 - fDTotS0) * (fDOrgS0 * cRhoOM + (1 - fDOrgS0) * cRhoIM) / cRhoWat / ( fDTotS0 + (1.0 - fDTotS0) * (fDOrgS0 * cRhoOM + (1 - fDOrgS0) * cRhoIM) / cRhoWat );
bPorCorS = ( (bPorS )^ (bPorS + 1.0));
sTime = time;
TimeYears = sTime / DaysPerYear;
Day = sTime - floor(TimeYears) * DaysPerYear;
if (ReadTemp == true ) 
uTm = mTemp 
else
uTm = cTmAve - cTmVar * cos(2.0*Pi*(sTime + TenDays - cTimeLag) / DaysPerYear) 
end;
if (ReadVWind == true)
uVWind = mVWind 
else
uVWind = cVWind 
end;
ufDay = cfDayAve - cfDayVar * cos(2.0*Pi*(sTime+TenDays) / DaysPerYear);
if (ReadLOut == true ) 
uLDay = 0.0 
else
uLDay = cLDayAve - cLDayVar * cos(2.0*Pi*(sTime+TenDays) / DaysPerYear) 
end;
if (ReadLOut == true ) 
uLOut = mLOut / ufDay 
else
uLOut = uLDay / SecsPerDay / ufDay 
end;
uLPAR0 = fPAR * (1.0 - fRefl) * uLOut;
aExtPhyt = cExtSpPhyt * sDPhytW;
aExtDet = cExtSpDet * sDDetW;
aExtIM = cExtSpIM * sDIMW;
aExtCoefOpen = cExtWat + aExtIM + aExtDet + aExtPhyt;
if (false == UseSeasonLoad) 
uQInSeason = 0.0 
elseif (Day < cDayApril1 - 0.5*cLengChange) 
uQInSeason = cQInWin 
elseif (Day < cDayApril1 + 0.5*cLengChange) 
uQInSeason = 0.5*(cQInWin + cQInSum) + 0.5*(cQInWin - cQInSum) * cos(Pi/cLengChange * (Day - cDayApril1)) 
elseif (Day < cDayOct1 - 0.5*cLengChange) 
uQInSeason = cQInSum 
elseif (Day < cDayOct1 + 0.5*cLengChange) 
uQInSeason = 0.5*(cQInWin + cQInSum) - 0.5*(cQInWin - cQInSum) * cos(Pi/cLengChange * (Day - cDayOct1)) 
else
uQInSeason = cQInWin 
end;
uQEvSinus = cQEvAve - cQEvVar * cos(2.0*Pi * (sTime + TenDays - cTimeLag) / DaysPerYear);
if (ReadQEv == true ) 
uQEv = mQEv 
else
uQEv = uQEvSinus 
end;
if ((Day >= cDayApril1 - 0.5*cLengChange) && (Day < cDayApril1 + 0.5*cLengChange)) 
uQInExtra = cQInExtraApril1 
elseif ( (Day >= cDayOct1 - 0.5*cLengChange) && (Day < cDayOct1 + 0.5*cLengChange) ) 
uQInExtra = cQInExtraOct1 
else
uQInExtra = 0.0 
end;
if ((Day >= cDayApril1 - 0.5*cLengChange) && (Day < cDayApril1 + 0.5*cLengChange)) 
uQOutExtra = cQOutExtraApril1 
elseif ( (Day >= cDayOct1 - 0.5*cLengChange) && (Day < cDayOct1 + 0.5*cLengChange) ) 
uQOutExtra = cQOutExtraOct1 
else
uQOutExtra = 0.0 
end;
if (ReadQIn == true ) 
uQIn = mQIn 
elseif (UseSeasonLoad == true ) 
uQIn = uQInSeason + uQInExtra 
else
uQIn = cQIn + uQInExtra 
end;
if (ReadQOut == true ) 
uQOut = max(mQOut, (sDepthW - cDepthWMax) * mmPerm) 
else
uQOut = max(0.0, (uQIn - uQInExtra) - uQEv - cQInf) + uQOutExtra 
end;
uQDil = uQIn - uQEv;
ukDil = uQDil / mmPerm / sDepthW;
ukDilWat = uQIn / mmPerm / sDepthW;
if (InclTran == true ) 
ukOut = uQOut / mmPerm / sDepthW 
else
ukOut = 0.0 
end;
uTauWat = 1.0 / (ukDilWat+NearZero);
uTauSubst = 1.0 / (ukDil+NearZero);
if (InclTran == true ) 
vTranDepthW = (uQIn - uQEv - cQInf - uQOut) / mmPerm 
else
vTranDepthW = 0.0 
end;
oDPhytW = sDPhytW;
oPPhytW = sPPhytW;
oNPhytW = sNPhytW;
aDPhytS = sDPhytS;
aPPhytS = sPPhytS;
aNPhytS = sNPhytS;
oDOMW = sDDetW + oDPhytW;
oDSestW = oDOMW + sDIMW;
oPOMW = oPPhytW + sPDetW;
oPSestW = oPPhytW + sPDetW + sPAIMW;
oPInorgW = sPO4W + sPAIMW;
oPTotW = oPSestW + sPO4W;
oNDissW = sNO3W + sNH4W;
oNOMW = oNPhytW + sNDetW;
oNSestW = oNOMW;
oNkjW = oNSestW + sNH4W;
oNTotW = oNkjW + sNO3W;
aDTotS = sDIMS + sDHumS + sDDetS;
aRhoTotS = aDTotS / cDepthS;
aRhoSolidS = (sDIMS * cRhoIM + (sDHumS + sDDetS) * cRhoOM) / aDTotS;
afDTotS = 1.0 / (1.0 + bPorS/(1.0-bPorS) * cRhoWat / aRhoSolidS);
afDOrgS = (sDHumS + sDDetS) / aDTotS;
afDetS = sDDetS / (sDHumS + sDDetS);
afDetTotS = sDDetS / (sDIMS + sDHumS + sDDetS);
aPInorgS = sPO4S + sPAIMS;
aPTotAvailS = sPDetS + aPInorgS + aPPhytS;
aPTotS = aPTotAvailS + sPHumS;
afPInorgS = aPInorgS / aDTotS;
afPTotS = aPTotS / aDTotS;
afPO4S = sPO4S / (aPTotAvailS + NearZero);
oPO4S = sPO4S / cDepthS / bPorS;
aNDissS = sNH4S + sNO3S;
aNkjAvailS = sNDetS + aNPhytS + sNH4S;
aNkjS = aNkjAvailS + sNHumS;
aNTotAvailS = aNkjAvailS + sNO3S;
aNTotS = aNkjS + sNO3S;
afNInorgS = aNDissS / aDTotS;
afNTotS = aNTotS / aDTotS;
oNO3S = sNO3S / cDepthS / bPorS;
oNH4S = sNH4S / cDepthS / bPorS;
oNDissS = aNDissS / cDepthS / bPorS;
rPDIMW = sPAIMW / sDIMW;
rPDIMS = sPAIMS / sDIMS;
rPDDetW = sPDetW / (sDDetW+NearZero);
rNDDetW = sNDetW / (sDDetW+NearZero);
rPDHumS = sPHumS / (sDHumS+NearZero);
rNDHumS = sNHumS / (sDHumS+NearZero);
rPDDetS = sPDetS / (sDDetS+NearZero);
rNDDetS = sNDetS / (sDDetS+NearZero);
if (false == UseSeasonLoad) 
uPLoadSeason = 0.0 
elseif (Day < cDayApril1 - 0.5*cLengChange) 
uPLoadSeason = cPLoadWin 
elseif (Day < cDayApril1 + 0.5*cLengChange) 
uPLoadSeason = 0.5*(cPLoadWin + cPLoadSum) + 0.5*(cPLoadWin - cPLoadSum) * cos(Pi/cLengChange * (Day - cDayApril1)) 
elseif (Day < cDayOct1 - 0.5*cLengChange) 
uPLoadSeason = cPLoadSum 
elseif (Day < cDayOct1 + 0.5*cLengChange) 
uPLoadSeason = 0.5*(cPLoadWin + cPLoadSum) - 0.5*(cPLoadWin - cPLoadSum) * cos(Pi/cLengChange * (Day - cDayOct1)) 
else
uPLoadSeason = cPLoadWin 
end;
if (ReadPLoad == true && ReadNutFrac == true ) 
uPLoad = mPLoadPO4 + mPLoadOrg 
elseif (ReadPLoad == true && false == ReadNutFrac) 
uPLoad = mPLoad 
elseif (UsePulseLoad == true ) 
uPLoad = 0.0 
elseif (UseSeasonLoad == true ) 
uPLoad = uPLoadSeason 
else
uPLoad = cPLoad 
end;
if (false == ReadPLoad) 
uPLoadPO4 = fPO4In * uPLoad 
elseif (ReadNutFrac == true ) 
uPLoadPO4 = mPLoadPO4 
else
uPLoadPO4 = fPO4In * mPLoad 
end;
if (false == ReadPLoad) 
uPLoadOrg = (1.0 - fPO4In) * uPLoad 
elseif (ReadNutFrac == true ) 
uPLoadOrg = mPLoadOrg 
else
uPLoadOrg = (1.0 - fPO4In) * mPLoad 
end;
if (ReadPLoadPhyt == true ) 
uPLoadPhytTot = mPLoadPhytTot 
else
uPLoadPhytTot = ((fPhytInSum+fPhytInWin)/2.0 - (fPhytInSum-fPhytInWin)/2.0 * cos(2.0*Pi * (sTime + TenDays - cTimeLag) / DaysPerYear)) * uPLoadOrg 
end;
uPLoadDet = uPLoadOrg - uPLoadPhytTot;
uPLoadAIM = 0.0;
if (false == UseSeasonLoad) 
uNLoadSeason = 0.0 
elseif (Day < cDayApril1 - 0.5*cLengChange) 
uNLoadSeason = cNLoadWin 
elseif (Day < cDayApril1 + 0.5*cLengChange) 
uNLoadSeason = 0.5*(cNLoadWin + cNLoadSum) + 0.5*(cNLoadWin - cNLoadSum) * cos(Pi/cLengChange * (Day - cDayApril1)) 
elseif (Day < cDayOct1 - 0.5*cLengChange) 
uNLoadSeason = cNLoadSum 
elseif (Day < cDayOct1 + 0.5*cLengChange) 
uNLoadSeason = 0.5*(cNLoadWin + cNLoadSum) - 0.5*(cNLoadWin - cNLoadSum) * cos(Pi/cLengChange * (Day - cDayOct1)) 
else
uNLoadSeason = cNLoadWin 
end;
uNLoadPhytTot = cNPPhytIn * uPLoadPhytTot;
if (ReadNLoad == true && ReadNutFrac == true ) 
uNLoad = mNLoadNH4 + mNLoadNO3 + mNLoadOrg 
elseif (ReadNLoad == true && false == ReadNutFrac) 
uNLoad = mNLoad 
elseif (UsePulseLoad == true ) 
uNLoad = 0.0 
elseif (ReadPLoad == true ) 
uNLoad = cNPLoadMeas * uPLoad 
elseif (UseSeasonLoad == true ) 
uNLoad = uNLoadSeason 
else
uNLoad = cNLoad 
end;
if (false == ReadNLoad) 
uNLoadDet = min(cNPDetIn * uPLoadDet, uNLoad - uNLoadPhytTot) 
elseif (ReadNutFrac == true ) 
uNLoadDet = 0.0 
else
uNLoadDet = min(cNPDetIn * uPLoadDet, uNLoad - uNLoadPhytTot) 
end;
if (false == ReadNLoad) 
uNLoadOrg = uNLoadPhytTot + uNLoadDet 
elseif (ReadNutFrac == true ) 
uNLoadOrg = mNLoadOrg 
else
uNLoadOrg = uNLoadPhytTot + uNLoadDet 
end;
if (false == ReadNLoad) 
uNLoadDiss = uNLoad - uNLoadOrg 
elseif (ReadNutFrac == true ) 
uNLoadDiss = 0.0 
else
uNLoadDiss = uNLoad - uNLoadOrg 
end;
if (false == ReadNLoad) 
uNLoadNH4 = fNH4DissIn * uNLoadDiss 
elseif (ReadNutFrac == true ) 
uNLoadNH4 = mNLoadNH4 
else
uNLoadNH4 = fNH4DissIn * uNLoadDiss 
end;
if (false == ReadNLoad) 
uNLoadNO3 = (1.0 - fNH4DissIn) * uNLoadDiss 
elseif (ReadNutFrac == true ) 
uNLoadNO3 = mNLoadNO3 
else
uNLoadNO3 = (1.0 - fNH4DissIn) * uNLoadDiss 
end;
uNTotIn = uNLoad / (uQIn / mmPerm + NearZero);
if (ReadDLoadDet == true ) 
uDLoadDet = mDLoadDet 
else
uDLoadDet = uNLoadDet / cNDDetIn 
end;
uDLoadPhytTot = uNLoadPhytTot / cNDPhytIn;
if (ReadDLoadIM == true ) 
uDLoadIM = mDLoadIM 
else
uDLoadIM = cDIMIn * uQIn / mmPerm 
end;
uDLoad = uDLoadIM + uDLoadDet + uDLoadPhytTot;
uPTotIn = uPLoad / (uQIn / mmPerm + NearZero);
wDDilIM = ukDil * sDIMW;
wDDilDet = ukDil * sDDetW;
wPDilPO4 = ukDil * sPO4W;
wPDilDet = ukDil*sPDetW;
wPDilAIM = ukDil * sPAIMW;
wNDilNH4 = ukDil * sNH4W;
wNDilNO3 = ukDil * sNO3W;
wNDilDet = ukDil * sNDetW;
wO2Inflow = ukDilWat * cO2In;
wO2Outfl = ukDil * sO2W;
wDDilPhyt = ukDil * sDPhytW;
wPDilPhyt = ukDil * sPPhytW;
wNDilPhyt = ukDil * sNPhytW;
wDOutflTot = ukOut * oDSestW;
wPOutflTot = ukOut * oPTotW;
wNOutflTot = ukOut * oNTotW;
uDLoadPhyt = uDLoadPhytTot;
uPLoadPhyt = uPLoadPhytTot;
uNLoadPhyt = uNLoadPhytTot;
if (InclTran == true ) 
wDTranPhyt = uDLoadPhyt / sDepthW - wDDilPhyt 
else
wDTranPhyt = 0.0 
end;
if (InclTran == true ) 
wPTranPhyt = uPLoadPhyt / sDepthW - wPDilPhyt 
else
wPTranPhyt = 0.0 
end;
if (InclTran == true ) 
wNTranPhyt = uNLoadPhyt / sDepthW - wNDilPhyt 
else
wNTranPhyt = 0.0 
end;
if (InclTran == true ) 
wDTranIMW = uDLoadIM / sDepthW - wDDilIM 
else
wDTranIMW = 0.0 
end;
if (InclTran == true ) 
wDTranDetW = uDLoadDet / sDepthW - wDDilDet 
else
wDTranDetW = 0.0 
end;
if (InclTran == true ) 
wO2TranW = wO2Inflow - wO2Outfl 
else
wO2TranW = 0.0 
end;
if (InclTran == true ) 
wPTranPO4W = uPLoadPO4 / sDepthW - wPDilPO4 
else
wPTranPO4W = 0.0 
end;
if (InclTran == true ) 
wPTranAIMW = uPLoadAIM / sDepthW - wPDilAIM 
else
wPTranAIMW = 0.0 
end;
if (InclTran == true ) 
wPTranDetW = uPLoadDet / sDepthW - wPDilDet 
else
wPTranDetW = 0.0 
end;
if (InclTran == true ) 
wNTranNH4W = uNLoadNH4 / sDepthW - wNDilNH4 
else
wNTranNH4W = 0.0 
end;
if (InclTran == true ) 
wNTranNO3W = uNLoadNO3 / sDepthW - wNDilNO3 
else
wNTranNO3W = 0.0 
end;
if (InclTran == true ) 
wNTranDetW = uNLoadDet / sDepthW - wNDilDet 
else
wNTranDetW = 0.0 
end;
wDDilTot = wDDilIM + wDDilDet + wDDilPhyt;
wPDilTot = wPDilDet + wPDilPO4 + wPDilAIM + wPDilPhyt;
wNDilTot = wNDilDet + wNDilNO3 + wNDilNH4 + wNDilPhyt;
if (false == InclTran) 
tPInfPO4W = 0.0 
elseif (cQInf >= 0.0) 
tPInfPO4W = cQInf / mmPerm * sPO4W 
else
tPInfPO4W = cQInf / mmPerm * oPO4S 
end;
if (false == InclTran) 
tNInfNH4W = 0.0 
elseif (cQInf >= 0.0) 
tNInfNH4W = cQInf / mmPerm * sNH4W 
else
tNInfNH4W = cQInf / mmPerm * oNH4S 
end;
if (false == InclTran) 
tNInfNO3W = 0.0 
elseif (cQInf >= 0.0) 
tNInfNO3W = cQInf / mmPerm * sNO3W 
else
tNInfNO3W = cQInf / mmPerm * oNO3S 
end;
if (false == InclTran) 
tPInfPO4S = 0.0 
elseif (cQInf >= 0.0) 
tPInfPO4S = cQInf / mmPerm * oPO4S 
else
tPInfPO4S = cQInf / mmPerm * cPO4Ground 
end;
if (false == InclTran) 
tNInfNH4S = 0.0 
elseif (cQInf >= 0.0) 
tNInfNH4S = cQInf / mmPerm * oNH4S 
else
tNInfNH4S = cQInf / mmPerm * cNH4Ground 
end;
if (false == InclTran) 
tNInfNO3S = 0.0 
elseif (cQInf >= 0.0) 
tNInfNO3S = cQInf / mmPerm * oNO3S 
else
tNInfNO3S = cQInf / mmPerm * cNO3Ground 
end;
tNH4LoadS = fNH4LoadS * cNLoadS;
tNO3LoadS = cNLoadS - tNH4LoadS;
uDErosIM = (1.0 - fDOrgSoil) * cDErosTot;
uDErosIMS = fSedErosIM * uDErosIM;
uDErosIMW = uDErosIM - uDErosIMS;
uDErosOM = fDOrgSoil * cDErosTot;
uPErosOM = cPDSoilOM * uDErosOM;
uNErosOM = cNDSoilOM * uDErosOM;
uO2Sat = 14.652 - 0.41022 * uTm + 0.007991 * uTm*uTm - 0.000077774 * uTm*uTm*uTm;
kAer = cAerRoot * ((uVWind )^ (0.5)) + cAerLin * uVWind + cAerSquare * uVWind*uVWind;
uFunTmAer = ( (cThetaAer )^ (uTm-cTmRef));
aFunLemnAer = max(0.0, 1.0 - (kLemnAer * sDLemn));
tO2Aer = kAer * uFunTmAer * (uO2Sat - sO2W) * aFunLemnAer;
tDTurbFish = 0.0;
tDTurbFishIM = fLutum * sDIMS / (fLutum * sDIMS + sDDetS) * tDTurbFish;
aDVeg = sDElod + sDChar + sDCera + sDLemn + sDNymp + sDHelo;
aFunVegResus = max(1.0 - kVegResus * aDVeg, 0.0);
if (uTm >= 0.1) 
aFunDimSusp = cSuspRef * ((cSuspMin + cSuspMax / (1.0 + exp(cSuspSlope * (sDepthW - hDepthSusp)))) * ((((cFetch +NearZero)/ cFetchRef))^(0.5))) 
else
aFunDimSusp = 0.0 
end;
tDResusTauDead = min(aFunDimSusp, (((aFunDimSusp +NearZero))^(0.5))) * (((fLutum / fLutumRef))^(0.5)) * bPorS;
tDResusBareDead = tDResusTauDead + tDTurbFish;
tDResusDead = tDResusBareDead * aFunVegResus;
tDResusIM = fLutum * sDIMS / (fLutum * sDIMS + sDDetS) * tDResusDead;
tDResusDet = sDDetS / (fLutum * sDIMS + sDDetS) * tDResusDead;
akResusPhytRef = kResusPhytMax * (1.0 - exp(cResusPhytExp * tDResusDead));
tDResusPhytTot = akResusPhytRef * aDPhytS;
tPResusDet = rPDDetS * tDResusDet;
tPResusPO4 = sPO4S / sDDetS * tDResusDet;
tPResusAIM = sPAIMS / sDIMS * tDResusIM;
tNResusNO3 = sNO3S / sDDetS * tDResusDet;
tNResusNH4 = sNH4S / sDDetS * tDResusDet;
tNResusDet = rNDDetS * tDResusDet;
aFunTauSetOM = min(1.0 / (((aFunDimSusp +NearZero))^(0.5)), 1.0);
aFunTauSetIM = aFunTauSetOM;
uFunTmSet = ( (cThetaSet )^ (uTm-cTmRef));
uCorVSetIM = aFunTauSetIM * (((fLutumRef/fLutum))^(0.5)) * uFunTmSet * cVSetIM;
tDSetIM = uCorVSetIM * sDIMW;
tPSetAIM = sPAIMW / sDIMW * tDSetIM;
uCorVSetDet = cVSetDet * aFunTauSetOM * uFunTmSet;
tDSetDet = uCorVSetDet * sDDetW;
tPSetDet = uCorVSetDet * sPDetW;
tNSetDet = uCorVSetDet * sNDetW;
kPMinDetW = kDMinDetW;
kNMinDetW = kDMinDetW;
uFunTmMinW = ( (cThetaMinW )^ (uTm-cTmRef));
wDMinDetW = kDMinDetW * uFunTmMinW * sDDetW;
wPMinDetW = kPMinDetW * uFunTmMinW * sPDetW;
wNMinDetW = kNMinDetW * uFunTmMinW * sNDetW;
aCorO2BOD = sO2W / (hO2BOD + sO2W);
wO2MinDetW = molO2molC * cCPerDW * aCorO2BOD * wDMinDetW;
wDDenitW = sNO3W*sNO3W / (hNO3Denit*hNO3Denit + sNO3W*sNO3W) * (1.0 - aCorO2BOD) * wDMinDetW;
wNDenitW = NO3PerC * molNmolC * cCPerDW * wDDenitW;
uFunTmNitr = ( (cThetaNitr )^ (uTm-cTmRef));
aCorO2NitrW = sO2W*sO2W / (hO2Nitr*hO2Nitr + sO2W*sO2W);
wNNitrW = kNitrW * uFunTmNitr * aCorO2NitrW * sNH4W;
wO2NitrW = O2PerNH4 * molO2molN * wNNitrW;
kPMinDetS = kDMinDetS;
kNMinDetS = kDMinDetS;
uFunTmMinS = ( (cThetaMinS )^ (uTm-cTmRef));
tDMinDetS = kDMinDetS * uFunTmMinS * sDDetS;
tPMinDetS = kPMinDetS * uFunTmMinS * sPDetS;
tNMinDetS = kNMinDetS * uFunTmMinS * sNDetS;
uFunTmDif = ( (cThetaDif )^ (uTm-cTmRef));
akO2DifCor = kO2Dif * uFunTmDif * cTurbDifO2 * bPorCorS;
tSOD = (molO2molC * cCPerDW * (1.0 - fRefrDetS) * tDMinDetS + O2PerNH4 * molO2molN * kNitrS * uFunTmNitr * sNH4S) / cDepthS;
aDepthOxySed = (((2.0 * sO2W * akO2DifCor / tSOD))^(0.5));
afOxySed = aDepthOxySed / cDepthS;
tDMinOxyDetS = afOxySed * (1.0 - fRefrDetS) * tDMinDetS;
tO2MinDetS = molO2molC * cCPerDW * tDMinOxyDetS;
tDDenitS = oNO3S*oNO3S / (hNO3Denit*hNO3Denit + oNO3S*oNO3S) * (1.0 - afOxySed) * (1.0 - fRefrDetS) * tDMinDetS;
tNDenitS = NO3PerC * molNmolC * cCPerDW * tDDenitS;
tNNitrS = afOxySed * kNitrS * uFunTmNitr * sNH4S;
tO2NitrS = O2PerNH4 * molO2molN * tNNitrS;
tDMinHumS = kDMinHum * uFunTmMinS * afOxySed * sDHumS;
tPMinHumS = kDMinHum * uFunTmMinS * afOxySed * sPHumS;
tNMinHumS = kDMinHum * uFunTmMinS * afOxySed * sNHumS;
aDepthDif = fDepthDifS * cDepthS;
tPDifPO4 = kPDifPO4 * uFunTmDif * cTurbDifNut * bPorCorS * (oPO4S - sPO4W ) / aDepthDif;
tNDifNO3 = kNDifNO3 * uFunTmDif * cTurbDifNut * bPorCorS * (oNO3S - sNO3W ) / aDepthDif;
tNDifNH4 = kNDifNH4 * uFunTmDif * cTurbDifNut * bPorCorS * (oNH4S - sNH4W ) / aDepthDif;
tO2Dif = kO2Dif / aDepthDif * uFunTmDif * cTurbDifO2 * bPorCorS * sO2W;
tPDifGroundPO4 = 0.0;
tNDifGroundNO3 = 0.0;
tNDifGroundNH4 = 0.0;
aPAdsMaxW = cRelPAdsD + aCorO2BOD * cRelPAdsFe * fFeDIM + cRelPAdsAl * fAlDIM;
aKPAdsW = (1.0 - fRedMax * (1.0-aCorO2BOD)) * cKPAdsOx;
aPIsoAdsW = aPAdsMaxW * aKPAdsW * sPO4W / (1.0 + aKPAdsW * sPO4W);
aPEqIMW = aPIsoAdsW * sDIMW;
wPSorpIMW = kPSorp * (aPEqIMW - sPAIMW);
aPAdsMaxS = cRelPAdsD + afOxySed * cRelPAdsFe * fFeDIM + cRelPAdsAl * fAlDIM;
aKPAdsS = (1.0 - fRedMax * (1.0-afOxySed)) * cKPAdsOx;
aPIsoAdsS = aPAdsMaxS * aKPAdsS * oPO4S / (1.0 + aKPAdsS * oPO4S);
aPEqIMS = aPIsoAdsS * sDIMS;
tPSorpIMS = kPSorp * (aPEqIMS - sPAIMS);
tPChemPO4 = max( 0.0, kPChemPO4 * (oPO4S - coPO4Max) );
wDAbioIMW = (uDErosIMW - tDSetIM + tDResusIM) / sDepthW;
wDAbioDetW = (- tDSetDet + tDResusDet ) / sDepthW - wDMinDetW;
tDAbioIMS = uDErosIMS + tDSetIM - tDResusIM;
tDAbioDetS = tDSetDet - tDResusDet - tDMinDetS;
tDAbioHumS = uDErosOM + fRefrDetS * tDMinDetS - tDMinHumS;
tDAbioTotT = cDErosTot - wDMinDetW * sDepthW - (1.0 - fRefrDetS) * tDMinDetS - tDMinHumS;
wO2AbioW = tO2Aer / sDepthW - wO2MinDetW - wO2NitrW - (tO2MinDetS + tO2NitrS) / sDepthW;
wPAbioDetW = - wPMinDetW - (tPSetDet - tPResusDet) / sDepthW;
wPAbioPO4W = wPMinDetW - wPSorpIMW - tPInfPO4W / sDepthW + tPDifPO4 / sDepthW + tPResusPO4 / sDepthW;
wPAbioAIMW = (- tPSetAIM + tPResusAIM) / sDepthW + wPSorpIMW;
tPAbioDetS = - tPMinDetS + tPSetDet - tPResusDet;
tPAbioHumS = uPErosOM + fRefrDetS * tPMinDetS - tPMinHumS;
tPAbioPO4S = tPInfPO4W - tPInfPO4S + (1.0-fRefrDetS) * tPMinDetS + tPMinHumS - tPSorpIMS - tPResusPO4 - tPDifPO4 - tPDifGroundPO4 - tPChemPO4;
tPAbioAIMS = tPSetAIM - tPResusAIM + tPSorpIMS;
tPAbioTotT = uPErosOM - tPChemPO4 - tPInfPO4S - tPDifGroundPO4;
wNAbioNH4W = wNMinDetW - wNNitrW - tNInfNH4W / sDepthW + (tNDifNH4 + tNResusNH4) / sDepthW;
wNAbioNO3W = wNNitrW - wNDenitW + (tNDifNO3 + tNResusNO3 - tNInfNO3W) / sDepthW;
wNAbioDetW = - wNMinDetW - (tNSetDet - tNResusDet ) / sDepthW;
tNAbioNH4S = tNInfNH4W - tNInfNH4S + (1.0-fRefrDetS) * tNMinDetS + tNMinHumS - tNResusNH4 - tNDifNH4 - tNDifGroundNH4 - tNNitrS;
tNAbioNO3S = tNInfNO3W - tNInfNO3S + tNNitrS - tNDenitS - tNResusNO3 - tNDifNO3 - tNDifGroundNO3;
tNAbioDetS = - tNMinDetS + tNSetDet - tNResusDet;
tNAbioHumS = uNErosOM + fRefrDetS * tNMinDetS - tNMinHumS;
tNAbioTotT = uNErosOM - tNDenitS - wNDenitW * sDepthW - tNInfNH4S - tNInfNO3S - tNDifGroundNO3 - tNDifGroundNH4;
fManElod = fManVeg;
fManCera = fManVeg;
fManChar = fManVeg;
fManNymp = fManHelo;
kMigrLemn = ckMigrLemn + (1.0 - fObstrLemn) * ukOut;
if (Day < 1.0 || sTime < BeginTime + 1.0) 
aDayInitElod = 367 
elseif (uTm >= cTmInitElod && aDayInitElod > 366) 
aDayInitElod = Day 
else
aDayInitElod = aDayInitElod 
end;
if (Day < aDayInitElod) 
bfRootElod = fRootElodWin 
elseif (Day < aDayInitElod + cLengAllo) 
bfRootElod = 0.5*(fRootElodWin + fRootElodSum) + 0.5*(fRootElodWin - fRootElodSum) * cos(Pi/cLengAllo * (Day - aDayInitElod)) 
elseif (Day < cDayWinElod) 
bfRootElod = fRootElodSum 
elseif (Day < cDayWinElod + cLengAllo) 
bfRootElod = 0.5*(fRootElodWin + fRootElodSum) - 0.5*(fRootElodWin - fRootElodSum) * cos(Pi/cLengAllo * (Day - cDayWinElod)) 
else
bfRootElod = fRootElodWin 
end;
bfShootElod = 1.0 - bfRootElod;
aDRootElod = bfRootElod * sDElod;
aDShootElod = bfShootElod * sDElod;
aDEmergElod = fEmergElod * aDShootElod;
aDFloatElod = fFloatElod * aDShootElod;
bfSubElod = 1.0 - fFloatElod - fEmergElod;
aDSubElod = bfSubElod * aDShootElod;
aExtElod = cExtSpElod * aDSubElod / sDepthW;
aDepth1Elod = fDepth1Elod * sDepthW;
aDepth2Elod = fDepth2Elod * sDepthW;
afCovSurfElod = min(1.0, max(aDFloatElod / (cDLayerElod + NearZero), aDEmergElod / (fEmergElod * cDCarrElod + NearZero) ) );
afCovEmergElod = min(1.0, PerCent * cCovSpElod * aDEmergElod);
aCovElod = min(100.0, cCovSpElod * aDShootElod);
if (Day < 1.0 || sTime < BeginTime + 1.0) 
aDayInitChar = 367 
elseif (uTm >= cTmInitChar && aDayInitChar > 366) 
aDayInitChar = Day 
else
aDayInitChar = aDayInitChar 
end;
if (Day < aDayInitChar) 
bfRootChar = fRootCharWin 
elseif (Day < aDayInitChar + cLengAllo) 
bfRootChar = 0.5*(fRootCharWin + fRootCharSum) + 0.5*(fRootCharWin - fRootCharSum) * cos(Pi/cLengAllo * (Day - aDayInitChar)) 
elseif (Day < cDayWinChar) 
bfRootChar = fRootCharSum 
elseif (Day < cDayWinChar + cLengAllo) 
bfRootChar = 0.5*(fRootCharWin + fRootCharSum) - 0.5*(fRootCharWin - fRootCharSum) * cos(Pi/cLengAllo * (Day - cDayWinChar)) 
else
bfRootChar = fRootCharWin 
end;
bfShootChar = 1.0 - bfRootChar;
aDRootChar = bfRootChar * sDChar;
aDShootChar = bfShootChar * sDChar;
aDEmergChar = fEmergChar * aDShootChar;
aDFloatChar = fFloatChar * aDShootChar;
bfSubChar = 1.0 - fFloatChar - fEmergChar;
aDSubChar = bfSubChar * aDShootChar;
aExtChar = cExtSpChar * aDSubChar / sDepthW;
aDepth1Char = fDepth1Char * sDepthW;
aDepth2Char = fDepth2Char * sDepthW;
afCovSurfChar = min(1.0, max(aDFloatChar / (cDLayerChar + NearZero), aDEmergChar / (fEmergChar * cDCarrChar + NearZero) ) );
afCovEmergChar = min(1.0, PerCent * cCovSpChar * aDEmergChar);
aCovChar = min(100.0, cCovSpChar * aDShootChar);
if (Day < 1.0 || sTime < BeginTime + 1.0) 
aDayInitCera = 367 
elseif (uTm >= cTmInitCera && aDayInitCera > 366) 
aDayInitCera = Day 
else
aDayInitCera = aDayInitCera 
end;
if (Day < aDayInitCera) 
bfRootCera = fRootCeraWin 
elseif (Day < aDayInitCera + cLengAllo) 
bfRootCera = 0.5*(fRootCeraWin + fRootCeraSum) + 0.5*(fRootCeraWin - fRootCeraSum) * cos(Pi/cLengAllo * (Day - aDayInitCera)) 
elseif (Day < cDayWinCera) 
bfRootCera = fRootCeraSum 
elseif (Day < cDayWinCera + cLengAllo) 
bfRootCera = 0.5*(fRootCeraWin + fRootCeraSum) - 0.5*(fRootCeraWin - fRootCeraSum) * cos(Pi/cLengAllo * (Day - cDayWinCera)) 
else
bfRootCera = fRootCeraWin 
end;
bfShootCera = 1.0 - bfRootCera;
aDRootCera = bfRootCera * sDCera;
aDShootCera = bfShootCera * sDCera;
aDEmergCera = fEmergCera * aDShootCera;
aDFloatCera = fFloatCera * aDShootCera;
bfSubCera = 1.0 - fFloatCera - fEmergCera;
aDSubCera = bfSubCera * aDShootCera;
aExtCera = cExtSpCera * aDSubCera / sDepthW;
aDepth1Cera = fDepth1Cera * sDepthW;
aDepth2Cera = fDepth2Cera * sDepthW;
afCovSurfCera = min(1.0, max(aDFloatCera / (cDLayerCera + NearZero), aDEmergCera / (fEmergCera * cDCarrCera + NearZero) ) );
afCovEmergCera = min(1.0, PerCent * cCovSpCera * aDEmergCera);
aCovCera = min(100.0, cCovSpCera * aDShootCera);
if (Day < 1.0 || sTime < BeginTime + 1.0) 
aDayInitLemn = 367 
elseif (uTm >= cTmInitLemn && aDayInitLemn > 366) 
aDayInitLemn = Day 
else
aDayInitLemn = aDayInitLemn 
end;
if (Day < aDayInitLemn) 
bfRootLemn = fRootLemnWin 
elseif (Day < aDayInitLemn + cLengAllo) 
bfRootLemn = 0.5*(fRootLemnWin + fRootLemnSum) + 0.5*(fRootLemnWin - fRootLemnSum) * cos(Pi/cLengAllo * (Day - aDayInitLemn)) 
elseif (Day < cDayWinLemn) 
bfRootLemn = fRootLemnSum 
elseif (Day < cDayWinLemn + cLengAllo) 
bfRootLemn = 0.5*(fRootLemnWin + fRootLemnSum) - 0.5*(fRootLemnWin - fRootLemnSum) * cos(Pi/cLengAllo * (Day - cDayWinLemn)) 
else
bfRootLemn = fRootLemnWin 
end;
bfShootLemn = 1.0 - bfRootLemn;
aDRootLemn = bfRootLemn * sDLemn;
aDShootLemn = bfShootLemn * sDLemn;
aDEmergLemn = fEmergLemn * aDShootLemn;
aDFloatLemn = fFloatLemn * aDShootLemn;
bfSubLemn = 1.0 - fFloatLemn - fEmergLemn;
aDSubLemn = bfSubLemn * aDShootLemn;
aExtLemn = cExtSpLemn * aDSubLemn / sDepthW;
aDepth1Lemn = fDepth1Lemn * sDepthW;
aDepth2Lemn = fDepth2Lemn * sDepthW;
afCovSurfLemn = min(1.0, max(aDFloatLemn / (cDLayerLemn + NearZero), aDEmergLemn / (fEmergLemn * cDCarrLemn + NearZero) ) );
afCovEmergLemn = min(1.0, PerCent * cCovSpLemn * aDEmergLemn);
aCovLemn = min(100.0, cCovSpLemn * aDShootLemn);
if (Day < 1.0 || sTime < BeginTime + 1.0) 
aDayInitNymp = 367 
elseif (uTm >= cTmInitNymp && aDayInitNymp > 366) 
aDayInitNymp = Day 
else
aDayInitNymp = aDayInitNymp 
end;
if (Day < aDayInitNymp) 
bfRootNymp = fRootNympWin 
elseif (Day < aDayInitNymp + cLengAllo) 
bfRootNymp = 0.5*(fRootNympWin + fRootNympSum) + 0.5*(fRootNympWin - fRootNympSum) * cos(Pi/cLengAllo * (Day - aDayInitNymp)) 
elseif (Day < cDayWinNymp) 
bfRootNymp = fRootNympSum 
elseif (Day < cDayWinNymp + cLengAllo) 
bfRootNymp = 0.5*(fRootNympWin + fRootNympSum) - 0.5*(fRootNympWin - fRootNympSum) * cos(Pi/cLengAllo * (Day - cDayWinNymp)) 
else
bfRootNymp = fRootNympWin 
end;
bfShootNymp = 1.0 - bfRootNymp;
aDRootNymp = bfRootNymp * sDNymp;
aDShootNymp = bfShootNymp * sDNymp;
aDEmergNymp = fEmergNymp * aDShootNymp;
aDFloatNymp = fFloatNymp * aDShootNymp;
bfSubNymp = 1.0 - fFloatNymp - fEmergNymp;
aDSubNymp = bfSubNymp * aDShootNymp;
aExtNymp = cExtSpNymp * aDSubNymp / sDepthW;
aDepth1Nymp = fDepth1Nymp * sDepthW;
aDepth2Nymp = fDepth2Nymp * sDepthW;
afCovSurfNymp = min(1.0, max(aDFloatNymp / (cDLayerNymp + NearZero), aDEmergNymp / (fEmergNymp * cDCarrNymp + NearZero) ) );
afCovEmergNymp = min(1.0, PerCent * cCovSpNymp * aDEmergNymp);
aCovNymp = min(100.0, cCovSpNymp * aDShootNymp);
if (Day < 1.0 || sTime < BeginTime + 1.0) 
aDayInitHelo = 367 
elseif (uTm >= cTmInitHelo && aDayInitHelo > 366) 
aDayInitHelo = Day 
else
aDayInitHelo = aDayInitHelo 
end;
if (Day < aDayInitHelo) 
bfRootHelo = fRootHeloWin 
elseif (Day < aDayInitHelo + cLengAllo) 
bfRootHelo = 0.5*(fRootHeloWin + fRootHeloSum) + 0.5*(fRootHeloWin - fRootHeloSum) * cos(Pi/cLengAllo * (Day - aDayInitHelo)) 
elseif (Day < cDayWinHelo) 
bfRootHelo = fRootHeloSum 
elseif (Day < cDayWinHelo + cLengAllo) 
bfRootHelo = 0.5*(fRootHeloWin + fRootHeloSum) - 0.5*(fRootHeloWin - fRootHeloSum) * cos(Pi/cLengAllo * (Day - cDayWinHelo)) 
else
bfRootHelo = fRootHeloWin 
end;
bfShootHelo = 1.0 - bfRootHelo;
aDRootHelo = bfRootHelo * sDHelo;
aDShootHelo = bfShootHelo * sDHelo;
aDEmergHelo = fEmergHelo * aDShootHelo;
aDFloatHelo = fFloatHelo * aDShootHelo;
bfSubHelo = 1.0 - fFloatHelo - fEmergHelo;
aDSubHelo = bfSubHelo * aDShootHelo;
aExtHelo = cExtSpHelo * aDSubHelo / sDepthW;
aDepth1Helo = fDepth1Helo * sDepthW;
aDepth2Helo = fDepth2Helo * sDepthW;
afCovSurfHelo = min(1.0, max(aDFloatHelo / (cDLayerHelo + NearZero), aDEmergHelo / (fEmergHelo * cDCarrHelo + NearZero) ) );
afCovEmergHelo = min(1.0, PerCent * cCovSpHelo * aDEmergHelo);
aCovHelo = min(100.0, cCovSpHelo * aDShootHelo);
aPVeg = sPElod + sPChar + sPCera + sPLemn + sPNymp + sPHelo;
aNVeg = sNElod + sNChar + sNCera + sNLemn + sNNymp + sNHelo;
afCovSurfVeg = min(1.0, afCovSurfElod + afCovSurfChar + afCovSurfCera + afCovSurfLemn + afCovSurfNymp + afCovSurfHelo);
afCovEmergVeg = min(1.0, afCovEmergElod + afCovEmergChar + afCovEmergCera + afCovEmergLemn + afCovEmergNymp + afCovEmergHelo);
aExtVeg = aExtElod + aExtChar + aExtCera + aExtLemn + aExtNymp + aExtHelo;
aExtCoef = aExtCoefOpen + aExtVeg;
aLPARBot = uLPAR0 * exp(- aExtCoef * sDepthW);
rPDElod = sPElod / (sDElod+NearZero);
rNDElod = sNElod / (sDElod+NearZero);
tDMigrElod = kMigrElod * (cDElodIn - sDElod);
tPMigrElod = kMigrElod * (cPDElod0* cDElodIn - sPElod);
tNMigrElod = kMigrElod * (cNDElod0* cDElodIn - sNElod);
uFunTmProdElod = ( (cQ10ProdElod )^ (0.1 * (uTm - cTmRef)));
uFunTmRespElod = ( (cQ10RespElod )^ (0.1 * (uTm - cTmRef)));
aVPUptMaxCrElod = max( 0.0, cVPUptMaxElod * uFunTmProdElod * (cPDElodMax-rPDElod) / (cPDElodMax-cPDElodMin) );
aVPUptElodW = sPO4W * aVPUptMaxCrElod / (aVPUptMaxCrElod / cAffPUptElod + sPO4W);
tPUptElodW = aVPUptElodW * (aDSubElod + aDFloatElod);
aVPUptElodS = oPO4S * aVPUptMaxCrElod / (aVPUptMaxCrElod / cAffPUptElod + oPO4S);
tPUptElodS = aVPUptElodS * aDRootElod;
tPUptElod = tPUptElodW + tPUptElodS;
aVNUptMaxCrElod = max( 0.0, cVNUptMaxElod * uFunTmProdElod * (cNDElodMax - rNDElod) / (cNDElodMax - cNDElodMin));
ahNUptElod = aVNUptMaxCrElod / cAffNUptElod;
aVNUptElodW = oNDissW * aVNUptMaxCrElod / (ahNUptElod + oNDissW);
tNUptElodW = aVNUptElodW * (aDSubElod + aDFloatElod);
afNH4UptElodW = sNH4W * sNO3W / ((ahNUptElod + sNH4W) * (ahNUptElod + sNO3W +NearZero)) + sNH4W * ahNUptElod / ((sNH4W + sNO3W +NearZero) * (ahNUptElod + sNO3W +NearZero));
tNUptNH4ElodW = afNH4UptElodW * tNUptElodW;
tNUptNO3ElodW = tNUptElodW - tNUptNH4ElodW;
aVNUptElodS = oNDissS * aVNUptMaxCrElod / (ahNUptElod + oNDissS);
tNUptElodS = aVNUptElodS * aDRootElod;
afNH4UptElodS = oNH4S * oNO3S / ((ahNUptElod + oNH4S +NearZero) * (ahNUptElod + oNO3S +NearZero)) + oNH4S * ahNUptElod / ((oNH4S + oNO3S+NearZero) * (ahNUptElod + oNO3S+NearZero));
tNUptNH4ElodS = afNH4UptElodS * tNUptElodS;
tNUptNO3ElodS = tNUptElodS - tNUptNH4ElodS;
tNUptElod = tNUptElodW + tNUptElodS;
aLPAR1Elod = uLPAR0 * exp(- aExtCoefOpen * aDepth1Elod);
aLPAR2Elod = aLPAR1Elod * exp(- aExtCoef * (aDepth2Elod - aDepth1Elod));
uhLElod = hLRefElod * uFunTmProdElod;
aLLimShootElod = fEmergElod + fFloatElod * (1.0 - afCovEmergVeg) + bfSubElod * (1.0 - afCovSurfVeg) * 1.0 / (aExtCoef * sDepthW) * log( (1.0 + aLPAR1Elod / uhLElod) / (1.0 + aLPAR2Elod / uhLElod));
aMuTmLElod = ufDay * bfShootElod * aLLimShootElod * uFunTmProdElod * cMuMaxElod;
aPLimElod = max(0.0, (1.0 - cPDElodMin / (rPDElod + NearZero)) * cPDElodMax / (cPDElodMax - cPDElodMin));
aNLimElod = max(0.0, (1.0 - cNDElodMin / (rNDElod + NearZero)) * cNDElodMax / (cNDElodMax - cNDElodMin));
aNutLimElod = min( aPLimElod, aNLimElod);
aMuElod = aMuTmLElod * aNutLimElod;
if (Day < cDayWinElod) 
bkMortElod = kMortElodSum 
elseif (Day < cDayWinElod + cLengMort) 
bkMortElod = - log(fWinElod) / cLengMort 
else
bkMortElod = kMortElodSum 
end;
akDIncrElod = aMuTmLElod - kDRespElod * uFunTmRespElod - bkMortElod;
tDEnvElod = max(0.0, akDIncrElod / (cDCarrElod+NearZero) * sDElod*sDElod);
tDEnvProdElod = aMuElod / cMuMaxElod * tDEnvElod;
tDProdElod = max(0.0, aMuElod * sDElod - tDEnvProdElod);
tDProdSubElod = bfSubElod * tDProdElod;
tDRespElod = kDRespElod * uFunTmRespElod * sDElod;
tDEnvMortElod = tDEnvElod - tDEnvProdElod;
tDMortElod = bkMortElod * sDElod + tDEnvMortElod;
tDMortElodW = fDetWMortElod * (1.0 - bfRootElod) * tDMortElod;
tDMortElodS = tDMortElod - tDMortElodW;
if ( (sTime >= cYearStartBirds * DaysPerYear) && (Day >= cDayStartBirds) && (Day <= cDayEndBirds) ) 
tDGrazElodBird = cPrefElodBird * sDElod / (hDVegBird + sDElod) * cBirdsPerha / m2Perha * cDGrazPerBird 
else
tDGrazElodBird = 0.0 
end;
if ((Day >= cDayManVeg1 && Day < cDayManVeg1 + cLengMan) || (Day >= cDayManVeg2 && Day < cDayManVeg2 + cLengMan)) 
bkManElod = -log(1.0 - fManElod) / cLengMan 
else
bkManElod = 0.0 
end;
tDManElod = bkManElod * sDElod;
tPManElod = rPDElod * tDManElod;
tNManElod = rNDElod * tDManElod;
tDBedElod = tDMigrElod + tDProdElod - tDRespElod - tDMortElod - tDGrazElodBird - tDManElod;
tO2ProdElod = molO2molC * cCPerDW * tDProdElod;
tO2RespElodW = molO2molC * cCPerDW * bfSubElod * tDRespElod * aCorO2BOD;
tO2RespElodS = molO2molC * cCPerDW * bfRootElod * tDRespElod * afOxySed;
tO2ProdElodS = min (tO2RespElodS, tO2ProdElod);
tO2ProdElodW = min( tO2ProdElod - tO2ProdElodS, bfSubElod * tO2ProdElod);
tO2UptNO3ElodW = O2PerNO3 * molO2molN * bfSubElod * tNUptNO3ElodW;
tO2UptNO3ElodS = O2PerNO3 * molO2molN * tNUptNO3ElodS;
tPExcrElod = (2.0*rPDElod) / (cPDElodMax + rPDElod) * rPDElod * tDRespElod;
tPExcrElodS = bfRootElod * tPExcrElod;
tPExcrElodW = tPExcrElod - tPExcrElodS;
tPMortElod = rPDElod * tDMortElod;
tPMortElodPO4 = fDissMortVeg * tPMortElod;
tPMortElodPO4S = bfRootElod * tPMortElodPO4;
tPMortElodPO4W = tPMortElodPO4 - tPMortElodPO4S;
tPMortElodDet = tPMortElod - tPMortElodPO4;
tPMortElodDetW = fDetWMortElod * (1.0 - bfRootElod) * tPMortElodDet;
tPMortElodDetS = tPMortElodDet - tPMortElodDetW;
tPGrazElodBird = rPDElod * tDGrazElodBird;
tPBedElod = tPMigrElod + tPUptElod - tPExcrElod - tPMortElod - tPGrazElodBird - tPManElod;
tNExcrElod = (2.0*rNDElod) / (cNDElodMax + rNDElod) * rNDElod * tDRespElod;
tNExcrElodS = bfRootElod * tNExcrElod;
tNExcrElodW = tNExcrElod - tNExcrElodS;
tNMortElod = rNDElod * tDMortElod;
tNMortElodNH4 = fDissMortVeg * tNMortElod;
tNMortElodNH4S = bfRootElod * tNMortElodNH4;
tNMortElodNH4W = tNMortElodNH4 - tNMortElodNH4S;
tNMortElodDet = tNMortElod - tNMortElodNH4;
tNMortElodDetW = fDetWMortElod * (1.0 - bfRootElod) * tNMortElodDet;
tNMortElodDetS = tNMortElodDet - tNMortElodDetW;
tNGrazElodBird = rNDElod * tDGrazElodBird;
tNBedElod = tNMigrElod + tNUptElod - tNExcrElod - tNMortElod - tNGrazElodBird - tNManElod;
rPDChar = sPChar / (sDChar+NearZero);
rNDChar = sNChar / (sDChar+NearZero);
tDMigrChar = kMigrChar * (cDCharIn - sDChar);
tPMigrChar = kMigrChar * (cPDChar0* cDCharIn - sPChar);
tNMigrChar = kMigrChar * (cNDChar0* cDCharIn - sNChar);
uFunTmProdChar = ( (cQ10ProdChar )^ (0.1 * (uTm - cTmRef)));
uFunTmRespChar = ( (cQ10RespChar )^ (0.1 * (uTm - cTmRef)));
aVPUptMaxCrChar = max( 0.0, cVPUptMaxChar * uFunTmProdChar * (cPDCharMax-rPDChar) / (cPDCharMax-cPDCharMin) );
aVPUptCharW = sPO4W * aVPUptMaxCrChar / (aVPUptMaxCrChar / cAffPUptChar + sPO4W);
tPUptCharW = aVPUptCharW * (aDSubChar + aDFloatChar);
aVPUptCharS = oPO4S * aVPUptMaxCrChar / (aVPUptMaxCrChar / cAffPUptChar + oPO4S);
tPUptCharS = aVPUptCharS * aDRootChar;
tPUptChar = tPUptCharW + tPUptCharS;
aVNUptMaxCrChar = max( 0.0, cVNUptMaxChar * uFunTmProdChar * (cNDCharMax - rNDChar) / (cNDCharMax - cNDCharMin));
ahNUptChar = aVNUptMaxCrChar / cAffNUptChar;
aVNUptCharW = oNDissW * aVNUptMaxCrChar / (ahNUptChar + oNDissW);
tNUptCharW = aVNUptCharW * (aDSubChar + aDFloatChar);
afNH4UptCharW = sNH4W * sNO3W / ((ahNUptChar + sNH4W) * (ahNUptChar + sNO3W +NearZero)) + sNH4W * ahNUptChar / ((sNH4W + sNO3W +NearZero) * (ahNUptChar + sNO3W +NearZero));
tNUptNH4CharW = afNH4UptCharW * tNUptCharW;
tNUptNO3CharW = tNUptCharW - tNUptNH4CharW;
aVNUptCharS = oNDissS * aVNUptMaxCrChar / (ahNUptChar + oNDissS);
tNUptCharS = aVNUptCharS * aDRootChar;
afNH4UptCharS = oNH4S * oNO3S / ((ahNUptChar + oNH4S +NearZero) * (ahNUptChar + oNO3S +NearZero)) + oNH4S * ahNUptChar / ((oNH4S + oNO3S+NearZero) * (ahNUptChar + oNO3S+NearZero));
tNUptNH4CharS = afNH4UptCharS * tNUptCharS;
tNUptNO3CharS = tNUptCharS - tNUptNH4CharS;
tNUptChar = tNUptCharW + tNUptCharS;
aLPAR1Char = uLPAR0 * exp(- aExtCoefOpen * aDepth1Char);
aLPAR2Char = aLPAR1Char * exp(- aExtCoef * (aDepth2Char - aDepth1Char));
uhLChar = hLRefChar * uFunTmProdChar;
aLLimShootChar = fEmergChar + fFloatChar * (1.0 - afCovEmergVeg) + bfSubChar * (1.0 - afCovSurfVeg) * 1.0 / (aExtCoef * sDepthW) * log( (1.0 + aLPAR1Char / uhLChar) / (1.0 + aLPAR2Char / uhLChar));
aMuTmLChar = ufDay * bfShootChar * aLLimShootChar * uFunTmProdChar * cMuMaxChar;
aPLimChar = max(0.0, (1.0 - cPDCharMin / (rPDChar + NearZero)) * cPDCharMax / (cPDCharMax - cPDCharMin));
aNLimChar = max(0.0, (1.0 - cNDCharMin / (rNDChar + NearZero)) * cNDCharMax / (cNDCharMax - cNDCharMin));
aNutLimChar = min( aPLimChar, aNLimChar);
aMuChar = aMuTmLChar * aNutLimChar;
if (Day < cDayWinChar) 
bkMortChar = kMortCharSum 
elseif (Day < cDayWinChar + cLengMort) 
bkMortChar = - log(fWinChar) / cLengMort 
else
bkMortChar = kMortCharSum 
end;
akDIncrChar = aMuTmLChar - kDRespChar * uFunTmRespChar - bkMortChar;
tDEnvChar = max(0.0, akDIncrChar / (cDCarrChar+NearZero) * sDChar*sDChar);
tDEnvProdChar = aMuChar / cMuMaxChar * tDEnvChar;
tDProdChar = max(0.0, aMuChar * sDChar - tDEnvProdChar);
tDProdSubChar = bfSubChar * tDProdChar;
tDRespChar = kDRespChar * uFunTmRespChar * sDChar;
tDEnvMortChar = tDEnvChar - tDEnvProdChar;
tDMortChar = bkMortChar * sDChar + tDEnvMortChar;
tDMortCharW = fDetWMortChar * (1.0 - bfRootChar) * tDMortChar;
tDMortCharS = tDMortChar - tDMortCharW;
if ( (sTime >= cYearStartBirds * DaysPerYear) && (Day >= cDayStartBirds) && (Day <= cDayEndBirds) ) 
tDGrazCharBird = cPrefCharBird * sDChar / (hDVegBird + sDChar) * cBirdsPerha / m2Perha * cDGrazPerBird 
else
tDGrazCharBird = 0.0 
end;
if ((Day >= cDayManVeg1 && Day < cDayManVeg1 + cLengMan) || (Day >= cDayManVeg2 && Day < cDayManVeg2 + cLengMan)) 
bkManChar = -log(1.0 - fManChar) / cLengMan 
else
bkManChar = 0.0 
end;
tDManChar = bkManChar * sDChar;
tPManChar = rPDChar * tDManChar;
tNManChar = rNDChar * tDManChar;
tDBedChar = tDMigrChar + tDProdChar - tDRespChar - tDMortChar - tDGrazCharBird - tDManChar;
tO2ProdChar = molO2molC * cCPerDW * tDProdChar;
tO2RespCharW = molO2molC * cCPerDW * bfSubChar * tDRespChar * aCorO2BOD;
tO2RespCharS = molO2molC * cCPerDW * bfRootChar * tDRespChar * afOxySed;
tO2ProdCharS = min (tO2RespCharS, tO2ProdChar);
tO2ProdCharW = min( tO2ProdChar - tO2ProdCharS, bfSubChar * tO2ProdChar);
tO2UptNO3CharW = O2PerNO3 * molO2molN * bfSubChar * tNUptNO3CharW;
tO2UptNO3CharS = O2PerNO3 * molO2molN * tNUptNO3CharS;
tPExcrChar = (2.0*rPDChar) / (cPDCharMax + rPDChar) * rPDChar * tDRespChar;
tPExcrCharS = bfRootChar * tPExcrChar;
tPExcrCharW = tPExcrChar - tPExcrCharS;
tPMortChar = rPDChar * tDMortChar;
tPMortCharPO4 = fDissMortVeg * tPMortChar;
tPMortCharPO4S = bfRootChar * tPMortCharPO4;
tPMortCharPO4W = tPMortCharPO4 - tPMortCharPO4S;
tPMortCharDet = tPMortChar - tPMortCharPO4;
tPMortCharDetW = fDetWMortChar * (1.0 - bfRootChar) * tPMortCharDet;
tPMortCharDetS = tPMortCharDet - tPMortCharDetW;
tPGrazCharBird = rPDChar * tDGrazCharBird;
tPBedChar = tPMigrChar + tPUptChar - tPExcrChar - tPMortChar - tPGrazCharBird - tPManChar;
tNExcrChar = (2.0*rNDChar) / (cNDCharMax + rNDChar) * rNDChar * tDRespChar;
tNExcrCharS = bfRootChar * tNExcrChar;
tNExcrCharW = tNExcrChar - tNExcrCharS;
tNMortChar = rNDChar * tDMortChar;
tNMortCharNH4 = fDissMortVeg * tNMortChar;
tNMortCharNH4S = bfRootChar * tNMortCharNH4;
tNMortCharNH4W = tNMortCharNH4 - tNMortCharNH4S;
tNMortCharDet = tNMortChar - tNMortCharNH4;
tNMortCharDetW = fDetWMortChar * (1.0 - bfRootChar) * tNMortCharDet;
tNMortCharDetS = tNMortCharDet - tNMortCharDetW;
tNGrazCharBird = rNDChar * tDGrazCharBird;
tNBedChar = tNMigrChar + tNUptChar - tNExcrChar - tNMortChar - tNGrazCharBird - tNManChar;
rPDCera = sPCera / (sDCera+NearZero);
rNDCera = sNCera / (sDCera+NearZero);
tDMigrCera = kMigrCera * (cDCeraIn - sDCera);
tPMigrCera = kMigrCera * (cPDCera0* cDCeraIn - sPCera);
tNMigrCera = kMigrCera * (cNDCera0* cDCeraIn - sNCera);
uFunTmProdCera = ( (cQ10ProdCera )^ (0.1 * (uTm - cTmRef)));
uFunTmRespCera = ( (cQ10RespCera )^ (0.1 * (uTm - cTmRef)));
aVPUptMaxCrCera = max( 0.0, cVPUptMaxCera * uFunTmProdCera * (cPDCeraMax-rPDCera) / (cPDCeraMax-cPDCeraMin) );
aVPUptCeraW = sPO4W * aVPUptMaxCrCera / (aVPUptMaxCrCera / cAffPUptCera + sPO4W);
tPUptCeraW = aVPUptCeraW * (aDSubCera + aDFloatCera);
aVPUptCeraS = oPO4S * aVPUptMaxCrCera / (aVPUptMaxCrCera / cAffPUptCera + oPO4S);
tPUptCeraS = aVPUptCeraS * aDRootCera;
tPUptCera = tPUptCeraW + tPUptCeraS;
aVNUptMaxCrCera = max( 0.0, cVNUptMaxCera * uFunTmProdCera * (cNDCeraMax - rNDCera) / (cNDCeraMax - cNDCeraMin));
ahNUptCera = aVNUptMaxCrCera / cAffNUptCera;
aVNUptCeraW = oNDissW * aVNUptMaxCrCera / (ahNUptCera + oNDissW);
tNUptCeraW = aVNUptCeraW * (aDSubCera + aDFloatCera);
afNH4UptCeraW = sNH4W * sNO3W / ((ahNUptCera + sNH4W) * (ahNUptCera + sNO3W +NearZero)) + sNH4W * ahNUptCera / ((sNH4W + sNO3W +NearZero) * (ahNUptCera + sNO3W +NearZero));
tNUptNH4CeraW = afNH4UptCeraW * tNUptCeraW;
tNUptNO3CeraW = tNUptCeraW - tNUptNH4CeraW;
aVNUptCeraS = oNDissS * aVNUptMaxCrCera / (ahNUptCera + oNDissS);
tNUptCeraS = aVNUptCeraS * aDRootCera;
afNH4UptCeraS = oNH4S * oNO3S / ((ahNUptCera + oNH4S +NearZero) * (ahNUptCera + oNO3S +NearZero)) + oNH4S * ahNUptCera / ((oNH4S + oNO3S+NearZero) * (ahNUptCera + oNO3S+NearZero));
tNUptNH4CeraS = afNH4UptCeraS * tNUptCeraS;
tNUptNO3CeraS = tNUptCeraS - tNUptNH4CeraS;
tNUptCera = tNUptCeraW + tNUptCeraS;
aLPAR1Cera = uLPAR0 * exp(- aExtCoefOpen * aDepth1Cera);
aLPAR2Cera = aLPAR1Cera * exp(- aExtCoef * (aDepth2Cera - aDepth1Cera));
uhLCera = hLRefCera * uFunTmProdCera;
aLLimShootCera = fEmergCera + fFloatCera * (1.0 - afCovEmergVeg) + bfSubCera * (1.0 - afCovSurfVeg) * 1.0 / (aExtCoef * sDepthW) * log( (1.0 + aLPAR1Cera / uhLCera) / (1.0 + aLPAR2Cera / uhLCera));
aMuTmLCera = ufDay * bfShootCera * aLLimShootCera * uFunTmProdCera * cMuMaxCera;
aPLimCera = max(0.0, (1.0 - cPDCeraMin / (rPDCera + NearZero)) * cPDCeraMax / (cPDCeraMax - cPDCeraMin));
aNLimCera = max(0.0, (1.0 - cNDCeraMin / (rNDCera + NearZero)) * cNDCeraMax / (cNDCeraMax - cNDCeraMin));
aNutLimCera = min( aPLimCera, aNLimCera);
aMuCera = aMuTmLCera * aNutLimCera;
if (Day < cDayWinCera) 
bkMortCera = kMortCeraSum 
elseif (Day < cDayWinCera + cLengMort) 
bkMortCera = - log(fWinCera) / cLengMort 
else
bkMortCera = kMortCeraSum 
end;
akDIncrCera = aMuTmLCera - kDRespCera * uFunTmRespCera - bkMortCera;
tDEnvCera = max(0.0, akDIncrCera / (cDCarrCera+NearZero) * sDCera*sDCera);
tDEnvProdCera = aMuCera / cMuMaxCera * tDEnvCera;
tDProdCera = max(0.0, aMuCera * sDCera - tDEnvProdCera);
tDProdSubCera = bfSubCera * tDProdCera;
tDRespCera = kDRespCera * uFunTmRespCera * sDCera;
tDEnvMortCera = tDEnvCera - tDEnvProdCera;
tDMortCera = bkMortCera * sDCera + tDEnvMortCera;
tDMortCeraW = fDetWMortCera * (1.0 - bfRootCera) * tDMortCera;
tDMortCeraS = tDMortCera - tDMortCeraW;
if ( (sTime >= cYearStartBirds * DaysPerYear) && (Day >= cDayStartBirds) && (Day <= cDayEndBirds) ) 
tDGrazCeraBird = cPrefCeraBird * sDCera / (hDVegBird + sDCera) * cBirdsPerha / m2Perha * cDGrazPerBird 
else
tDGrazCeraBird = 0.0 
end;
if ((Day >= cDayManVeg1 && Day < cDayManVeg1 + cLengMan) || (Day >= cDayManVeg2 && Day < cDayManVeg2 + cLengMan)) 
bkManCera = -log(1.0 - fManCera) / cLengMan 
else
bkManCera = 0.0 
end;
tDManCera = bkManCera * sDCera;
tPManCera = rPDCera * tDManCera;
tNManCera = rNDCera * tDManCera;
tDBedCera = tDMigrCera + tDProdCera - tDRespCera - tDMortCera - tDGrazCeraBird - tDManCera;
tO2ProdCera = molO2molC * cCPerDW * tDProdCera;
tO2RespCeraW = molO2molC * cCPerDW * bfSubCera * tDRespCera * aCorO2BOD;
tO2RespCeraS = molO2molC * cCPerDW * bfRootCera * tDRespCera * afOxySed;
tO2ProdCeraS = min (tO2RespCeraS, tO2ProdCera);
tO2ProdCeraW = min( tO2ProdCera - tO2ProdCeraS, bfSubCera * tO2ProdCera);
tO2UptNO3CeraW = O2PerNO3 * molO2molN * bfSubCera * tNUptNO3CeraW;
tO2UptNO3CeraS = O2PerNO3 * molO2molN * tNUptNO3CeraS;
tPExcrCera = (2.0*rPDCera) / (cPDCeraMax + rPDCera) * rPDCera * tDRespCera;
tPExcrCeraS = bfRootCera * tPExcrCera;
tPExcrCeraW = tPExcrCera - tPExcrCeraS;
tPMortCera = rPDCera * tDMortCera;
tPMortCeraPO4 = fDissMortVeg * tPMortCera;
tPMortCeraPO4S = bfRootCera * tPMortCeraPO4;
tPMortCeraPO4W = tPMortCeraPO4 - tPMortCeraPO4S;
tPMortCeraDet = tPMortCera - tPMortCeraPO4;
tPMortCeraDetW = fDetWMortCera * (1.0 - bfRootCera) * tPMortCeraDet;
tPMortCeraDetS = tPMortCeraDet - tPMortCeraDetW;
tPGrazCeraBird = rPDCera * tDGrazCeraBird;
tPBedCera = tPMigrCera + tPUptCera - tPExcrCera - tPMortCera - tPGrazCeraBird - tPManCera;
tNExcrCera = (2.0*rNDCera) / (cNDCeraMax + rNDCera) * rNDCera * tDRespCera;
tNExcrCeraS = bfRootCera * tNExcrCera;
tNExcrCeraW = tNExcrCera - tNExcrCeraS;
tNMortCera = rNDCera * tDMortCera;
tNMortCeraNH4 = fDissMortVeg * tNMortCera;
tNMortCeraNH4S = bfRootCera * tNMortCeraNH4;
tNMortCeraNH4W = tNMortCeraNH4 - tNMortCeraNH4S;
tNMortCeraDet = tNMortCera - tNMortCeraNH4;
tNMortCeraDetW = fDetWMortCera * (1.0 - bfRootCera) * tNMortCeraDet;
tNMortCeraDetS = tNMortCeraDet - tNMortCeraDetW;
tNGrazCeraBird = rNDCera * tDGrazCeraBird;
tNBedCera = tNMigrCera + tNUptCera - tNExcrCera - tNMortCera - tNGrazCeraBird - tNManCera;
rPDLemn = sPLemn / (sDLemn+NearZero);
rNDLemn = sNLemn / (sDLemn+NearZero);
tDMigrLemn = kMigrLemn * (cDLemnIn - sDLemn);
tPMigrLemn = kMigrLemn * (cPDLemn0* cDLemnIn - sPLemn);
tNMigrLemn = kMigrLemn * (cNDLemn0* cDLemnIn - sNLemn);
uFunTmProdLemn = ( (cQ10ProdLemn )^ (0.1 * (uTm - cTmRef)));
uFunTmRespLemn = ( (cQ10RespLemn )^ (0.1 * (uTm - cTmRef)));
aVPUptMaxCrLemn = max( 0.0, cVPUptMaxLemn * uFunTmProdLemn * (cPDLemnMax-rPDLemn) / (cPDLemnMax-cPDLemnMin) );
aVPUptLemnW = sPO4W * aVPUptMaxCrLemn / (aVPUptMaxCrLemn / cAffPUptLemn + sPO4W);
tPUptLemnW = aVPUptLemnW * (aDSubLemn + aDFloatLemn);
aVPUptLemnS = oPO4S * aVPUptMaxCrLemn / (aVPUptMaxCrLemn / cAffPUptLemn + oPO4S);
tPUptLemnS = aVPUptLemnS * aDRootLemn;
tPUptLemn = tPUptLemnW + tPUptLemnS;
aVNUptMaxCrLemn = max( 0.0, cVNUptMaxLemn * uFunTmProdLemn * (cNDLemnMax - rNDLemn) / (cNDLemnMax - cNDLemnMin));
ahNUptLemn = aVNUptMaxCrLemn / cAffNUptLemn;
aVNUptLemnW = oNDissW * aVNUptMaxCrLemn / (ahNUptLemn + oNDissW);
tNUptLemnW = aVNUptLemnW * (aDSubLemn + aDFloatLemn);
afNH4UptLemnW = sNH4W * sNO3W / ((ahNUptLemn + sNH4W) * (ahNUptLemn + sNO3W +NearZero)) + sNH4W * ahNUptLemn / ((sNH4W + sNO3W +NearZero) * (ahNUptLemn + sNO3W +NearZero));
tNUptNH4LemnW = afNH4UptLemnW * tNUptLemnW;
tNUptNO3LemnW = tNUptLemnW - tNUptNH4LemnW;
aVNUptLemnS = oNDissS * aVNUptMaxCrLemn / (ahNUptLemn + oNDissS);
tNUptLemnS = aVNUptLemnS * aDRootLemn;
afNH4UptLemnS = oNH4S * oNO3S / ((ahNUptLemn + oNH4S +NearZero) * (ahNUptLemn + oNO3S +NearZero)) + oNH4S * ahNUptLemn / ((oNH4S + oNO3S+NearZero) * (ahNUptLemn + oNO3S+NearZero));
tNUptNH4LemnS = afNH4UptLemnS * tNUptLemnS;
tNUptNO3LemnS = tNUptLemnS - tNUptNH4LemnS;
tNUptLemn = tNUptLemnW + tNUptLemnS;
aLPAR1Lemn = uLPAR0 * exp(- aExtCoefOpen * aDepth1Lemn);
aLPAR2Lemn = aLPAR1Lemn * exp(- aExtCoef * (aDepth2Lemn - aDepth1Lemn));
uhLLemn = hLRefLemn * uFunTmProdLemn;
aLLimShootLemn = fEmergLemn + fFloatLemn * (1.0 - afCovEmergVeg) + bfSubLemn * (1.0 - afCovSurfVeg) * 1.0 / (aExtCoef * sDepthW) * log( (1.0 + aLPAR1Lemn / uhLLemn) / (1.0 + aLPAR2Lemn / uhLLemn));
aMuTmLLemn = ufDay * bfShootLemn * aLLimShootLemn * uFunTmProdLemn * cMuMaxLemn;
aPLimLemn = max(0.0, (1.0 - cPDLemnMin / (rPDLemn + NearZero)) * cPDLemnMax / (cPDLemnMax - cPDLemnMin));
aNLimLemn = max(0.0, (1.0 - cNDLemnMin / (rNDLemn + NearZero)) * cNDLemnMax / (cNDLemnMax - cNDLemnMin));
aNutLimLemn = min( aPLimLemn, aNLimLemn);
aMuLemn = aMuTmLLemn * aNutLimLemn;
if (Day < cDayWinLemn) 
bkMortLemn = kMortLemnSum 
elseif (Day < cDayWinLemn + cLengMort) 
bkMortLemn = - log(fWinLemn) / cLengMort 
else
bkMortLemn = kMortLemnSum 
end;
akDIncrLemn = aMuTmLLemn - kDRespLemn * uFunTmRespLemn - bkMortLemn;
tDEnvLemn = max(0.0, akDIncrLemn / (cDCarrLemn+NearZero) * sDLemn*sDLemn);
tDEnvProdLemn = aMuLemn / cMuMaxLemn * tDEnvLemn;
tDProdLemn = max(0.0, aMuLemn * sDLemn - tDEnvProdLemn);
tDProdSubLemn = bfSubLemn * tDProdLemn;
tDRespLemn = kDRespLemn * uFunTmRespLemn * sDLemn;
tDEnvMortLemn = tDEnvLemn - tDEnvProdLemn;
tDMortLemn = bkMortLemn * sDLemn + tDEnvMortLemn;
tDMortLemnW = fDetWMortLemn * (1.0 - bfRootLemn) * tDMortLemn;
tDMortLemnS = tDMortLemn - tDMortLemnW;
if ( (sTime >= cYearStartBirds * DaysPerYear) && (Day >= cDayStartBirds) && (Day <= cDayEndBirds) ) 
tDGrazLemnBird = cPrefLemnBird * sDLemn / (hDVegBird + sDLemn) * cBirdsPerha / m2Perha * cDGrazPerBird 
else
tDGrazLemnBird = 0.0 
end;
if ((Day >= cDayManVeg1 && Day < cDayManVeg1 + cLengMan) || (Day >= cDayManVeg2 && Day < cDayManVeg2 + cLengMan)) 
bkManLemn = -log(1.0 - fManLemn) / cLengMan 
else
bkManLemn = 0.0 
end;
tDManLemn = bkManLemn * sDLemn;
tPManLemn = rPDLemn * tDManLemn;
tNManLemn = rNDLemn * tDManLemn;
tDBedLemn = tDMigrLemn + tDProdLemn - tDRespLemn - tDMortLemn - tDGrazLemnBird - tDManLemn;
tO2ProdLemn = molO2molC * cCPerDW * tDProdLemn;
tO2RespLemnW = molO2molC * cCPerDW * bfSubLemn * tDRespLemn * aCorO2BOD;
tO2RespLemnS = molO2molC * cCPerDW * bfRootLemn * tDRespLemn * afOxySed;
tO2ProdLemnS = min (tO2RespLemnS, tO2ProdLemn);
tO2ProdLemnW = min( tO2ProdLemn - tO2ProdLemnS, bfSubLemn * tO2ProdLemn);
tO2UptNO3LemnW = O2PerNO3 * molO2molN * bfSubLemn * tNUptNO3LemnW;
tO2UptNO3LemnS = O2PerNO3 * molO2molN * tNUptNO3LemnS;
tPExcrLemn = (2.0*rPDLemn) / (cPDLemnMax + rPDLemn) * rPDLemn * tDRespLemn;
tPExcrLemnS = bfRootLemn * tPExcrLemn;
tPExcrLemnW = tPExcrLemn - tPExcrLemnS;
tPMortLemn = rPDLemn * tDMortLemn;
tPMortLemnPO4 = fDissMortVeg * tPMortLemn;
tPMortLemnPO4S = bfRootLemn * tPMortLemnPO4;
tPMortLemnPO4W = tPMortLemnPO4 - tPMortLemnPO4S;
tPMortLemnDet = tPMortLemn - tPMortLemnPO4;
tPMortLemnDetW = fDetWMortLemn * (1.0 - bfRootLemn) * tPMortLemnDet;
tPMortLemnDetS = tPMortLemnDet - tPMortLemnDetW;
tPGrazLemnBird = rPDLemn * tDGrazLemnBird;
tPBedLemn = tPMigrLemn + tPUptLemn - tPExcrLemn - tPMortLemn - tPGrazLemnBird - tPManLemn;
tNExcrLemn = (2.0*rNDLemn) / (cNDLemnMax + rNDLemn) * rNDLemn * tDRespLemn;
tNExcrLemnS = bfRootLemn * tNExcrLemn;
tNExcrLemnW = tNExcrLemn - tNExcrLemnS;
tNMortLemn = rNDLemn * tDMortLemn;
tNMortLemnNH4 = fDissMortVeg * tNMortLemn;
tNMortLemnNH4S = bfRootLemn * tNMortLemnNH4;
tNMortLemnNH4W = tNMortLemnNH4 - tNMortLemnNH4S;
tNMortLemnDet = tNMortLemn - tNMortLemnNH4;
tNMortLemnDetW = fDetWMortLemn * (1.0 - bfRootLemn) * tNMortLemnDet;
tNMortLemnDetS = tNMortLemnDet - tNMortLemnDetW;
tNGrazLemnBird = rNDLemn * tDGrazLemnBird;
tNBedLemn = tNMigrLemn + tNUptLemn - tNExcrLemn - tNMortLemn - tNGrazLemnBird - tNManLemn;
rPDNymp = sPNymp / (sDNymp+NearZero);
rNDNymp = sNNymp / (sDNymp+NearZero);
tDMigrNymp = kMigrNymp * (cDNympIn - sDNymp);
tPMigrNymp = kMigrNymp * (cPDNymp0* cDNympIn - sPNymp);
tNMigrNymp = kMigrNymp * (cNDNymp0* cDNympIn - sNNymp);
uFunTmProdNymp = ( (cQ10ProdNymp )^ (0.1 * (uTm - cTmRef)));
uFunTmRespNymp = ( (cQ10RespNymp )^ (0.1 * (uTm - cTmRef)));
aVPUptMaxCrNymp = max( 0.0, cVPUptMaxNymp * uFunTmProdNymp * (cPDNympMax-rPDNymp) / (cPDNympMax-cPDNympMin) );
aVPUptNympW = sPO4W * aVPUptMaxCrNymp / (aVPUptMaxCrNymp / cAffPUptNymp + sPO4W);
tPUptNympW = aVPUptNympW * (aDSubNymp + aDFloatNymp);
aVPUptNympS = oPO4S * aVPUptMaxCrNymp / (aVPUptMaxCrNymp / cAffPUptNymp + oPO4S);
tPUptNympS = aVPUptNympS * aDRootNymp;
tPUptNymp = tPUptNympW + tPUptNympS;
aVNUptMaxCrNymp = max( 0.0, cVNUptMaxNymp * uFunTmProdNymp * (cNDNympMax - rNDNymp) / (cNDNympMax - cNDNympMin));
ahNUptNymp = aVNUptMaxCrNymp / cAffNUptNymp;
aVNUptNympW = oNDissW * aVNUptMaxCrNymp / (ahNUptNymp + oNDissW);
tNUptNympW = aVNUptNympW * (aDSubNymp + aDFloatNymp);
afNH4UptNympW = sNH4W * sNO3W / ((ahNUptNymp + sNH4W) * (ahNUptNymp + sNO3W +NearZero)) + sNH4W * ahNUptNymp / ((sNH4W + sNO3W +NearZero) * (ahNUptNymp + sNO3W +NearZero));
tNUptNH4NympW = afNH4UptNympW * tNUptNympW;
tNUptNO3NympW = tNUptNympW - tNUptNH4NympW;
aVNUptNympS = oNDissS * aVNUptMaxCrNymp / (ahNUptNymp + oNDissS);
tNUptNympS = aVNUptNympS * aDRootNymp;
afNH4UptNympS = oNH4S * oNO3S / ((ahNUptNymp + oNH4S +NearZero) * (ahNUptNymp + oNO3S +NearZero)) + oNH4S * ahNUptNymp / ((oNH4S + oNO3S+NearZero) * (ahNUptNymp + oNO3S+NearZero));
tNUptNH4NympS = afNH4UptNympS * tNUptNympS;
tNUptNO3NympS = tNUptNympS - tNUptNH4NympS;
tNUptNymp = tNUptNympW + tNUptNympS;
aLPAR1Nymp = uLPAR0 * exp(- aExtCoefOpen * aDepth1Nymp);
aLPAR2Nymp = aLPAR1Nymp * exp(- aExtCoef * (aDepth2Nymp - aDepth1Nymp));
uhLNymp = hLRefNymp * uFunTmProdNymp;
aLLimShootNymp = fEmergNymp + fFloatNymp * (1.0 - afCovEmergVeg) + bfSubNymp * (1.0 - afCovSurfVeg) * 1.0 / (aExtCoef * sDepthW) * log( (1.0 + aLPAR1Nymp / uhLNymp) / (1.0 + aLPAR2Nymp / uhLNymp));
aMuTmLNymp = ufDay * bfShootNymp * aLLimShootNymp * uFunTmProdNymp * cMuMaxNymp;
aPLimNymp = max(0.0, (1.0 - cPDNympMin / (rPDNymp + NearZero)) * cPDNympMax / (cPDNympMax - cPDNympMin));
aNLimNymp = max(0.0, (1.0 - cNDNympMin / (rNDNymp + NearZero)) * cNDNympMax / (cNDNympMax - cNDNympMin));
aNutLimNymp = min( aPLimNymp, aNLimNymp);
aMuNymp = aMuTmLNymp * aNutLimNymp;
if (Day < cDayWinNymp) 
bkMortNymp = kMortNympSum 
elseif (Day < cDayWinNymp + cLengMort) 
bkMortNymp = - log(fWinNymp) / cLengMort 
else
bkMortNymp = kMortNympSum 
end;
akDIncrNymp = aMuTmLNymp - kDRespNymp * uFunTmRespNymp - bkMortNymp;
tDEnvNymp = max(0.0, akDIncrNymp / (cDCarrNymp+NearZero) * sDNymp*sDNymp);
tDEnvProdNymp = aMuNymp / cMuMaxNymp * tDEnvNymp;
tDProdNymp = max(0.0, aMuNymp * sDNymp - tDEnvProdNymp);
tDProdSubNymp = bfSubNymp * tDProdNymp;
tDRespNymp = kDRespNymp * uFunTmRespNymp * sDNymp;
tDEnvMortNymp = tDEnvNymp - tDEnvProdNymp;
tDMortNymp = bkMortNymp * sDNymp + tDEnvMortNymp;
tDMortNympW = fDetWMortNymp * (1.0 - bfRootNymp) * tDMortNymp;
tDMortNympS = tDMortNymp - tDMortNympW;
if ( (sTime >= cYearStartBirds * DaysPerYear) && (Day >= cDayStartBirds) && (Day <= cDayEndBirds) ) 
tDGrazNympBird = cPrefNympBird * sDNymp / (hDVegBird + sDNymp) * cBirdsPerha / m2Perha * cDGrazPerBird 
else
tDGrazNympBird = 0.0 
end;
if ((Day >= cDayManVeg1 && Day < cDayManVeg1 + cLengMan) || (Day >= cDayManVeg2 && Day < cDayManVeg2 + cLengMan)) 
bkManNymp = -log(1.0 - fManNymp) / cLengMan 
else
bkManNymp = 0.0 
end;
tDManNymp = bkManNymp * sDNymp;
tPManNymp = rPDNymp * tDManNymp;
tNManNymp = rNDNymp * tDManNymp;
tDBedNymp = tDMigrNymp + tDProdNymp - tDRespNymp - tDMortNymp - tDGrazNympBird - tDManNymp;
tO2ProdNymp = molO2molC * cCPerDW * tDProdNymp;
tO2RespNympW = molO2molC * cCPerDW * bfSubNymp * tDRespNymp * aCorO2BOD;
tO2RespNympS = molO2molC * cCPerDW * bfRootNymp * tDRespNymp * afOxySed;
tO2ProdNympS = min (tO2RespNympS, tO2ProdNymp);
tO2ProdNympW = min( tO2ProdNymp - tO2ProdNympS, bfSubNymp * tO2ProdNymp);
tO2UptNO3NympW = O2PerNO3 * molO2molN * bfSubNymp * tNUptNO3NympW;
tO2UptNO3NympS = O2PerNO3 * molO2molN * tNUptNO3NympS;
tPExcrNymp = (2.0*rPDNymp) / (cPDNympMax + rPDNymp) * rPDNymp * tDRespNymp;
tPExcrNympS = bfRootNymp * tPExcrNymp;
tPExcrNympW = tPExcrNymp - tPExcrNympS;
tPMortNymp = rPDNymp * tDMortNymp;
tPMortNympPO4 = fDissMortVeg * tPMortNymp;
tPMortNympPO4S = bfRootNymp * tPMortNympPO4;
tPMortNympPO4W = tPMortNympPO4 - tPMortNympPO4S;
tPMortNympDet = tPMortNymp - tPMortNympPO4;
tPMortNympDetW = fDetWMortNymp * (1.0 - bfRootNymp) * tPMortNympDet;
tPMortNympDetS = tPMortNympDet - tPMortNympDetW;
tPGrazNympBird = rPDNymp * tDGrazNympBird;
tPBedNymp = tPMigrNymp + tPUptNymp - tPExcrNymp - tPMortNymp - tPGrazNympBird - tPManNymp;
tNExcrNymp = (2.0*rNDNymp) / (cNDNympMax + rNDNymp) * rNDNymp * tDRespNymp;
tNExcrNympS = bfRootNymp * tNExcrNymp;
tNExcrNympW = tNExcrNymp - tNExcrNympS;
tNMortNymp = rNDNymp * tDMortNymp;
tNMortNympNH4 = fDissMortVeg * tNMortNymp;
tNMortNympNH4S = bfRootNymp * tNMortNympNH4;
tNMortNympNH4W = tNMortNympNH4 - tNMortNympNH4S;
tNMortNympDet = tNMortNymp - tNMortNympNH4;
tNMortNympDetW = fDetWMortNymp * (1.0 - bfRootNymp) * tNMortNympDet;
tNMortNympDetS = tNMortNympDet - tNMortNympDetW;
tNGrazNympBird = rNDNymp * tDGrazNympBird;
tNBedNymp = tNMigrNymp + tNUptNymp - tNExcrNymp - tNMortNymp - tNGrazNympBird - tNManNymp;
rPDHelo = sPHelo / (sDHelo+NearZero);
rNDHelo = sNHelo / (sDHelo+NearZero);
tDMigrHelo = kMigrHelo * (cDHeloIn - sDHelo);
tPMigrHelo = kMigrHelo * (cPDHelo0* cDHeloIn - sPHelo);
tNMigrHelo = kMigrHelo * (cNDHelo0* cDHeloIn - sNHelo);
uFunTmProdHelo = ( (cQ10ProdHelo )^ (0.1 * (uTm - cTmRef)));
uFunTmRespHelo = ( (cQ10RespHelo )^ (0.1 * (uTm - cTmRef)));
aVPUptMaxCrHelo = max( 0.0, cVPUptMaxHelo * uFunTmProdHelo * (cPDHeloMax-rPDHelo) / (cPDHeloMax-cPDHeloMin) );
aVPUptHeloW = sPO4W * aVPUptMaxCrHelo / (aVPUptMaxCrHelo / cAffPUptHelo + sPO4W);
tPUptHeloW = aVPUptHeloW * (aDSubHelo + aDFloatHelo);
aVPUptHeloS = oPO4S * aVPUptMaxCrHelo / (aVPUptMaxCrHelo / cAffPUptHelo + oPO4S);
tPUptHeloS = aVPUptHeloS * aDRootHelo;
tPUptHelo = tPUptHeloW + tPUptHeloS;
aVNUptMaxCrHelo = max( 0.0, cVNUptMaxHelo * uFunTmProdHelo * (cNDHeloMax - rNDHelo) / (cNDHeloMax - cNDHeloMin));
ahNUptHelo = aVNUptMaxCrHelo / cAffNUptHelo;
aVNUptHeloW = oNDissW * aVNUptMaxCrHelo / (ahNUptHelo + oNDissW);
tNUptHeloW = aVNUptHeloW * (aDSubHelo + aDFloatHelo);
afNH4UptHeloW = sNH4W * sNO3W / ((ahNUptHelo + sNH4W) * (ahNUptHelo + sNO3W +NearZero)) + sNH4W * ahNUptHelo / ((sNH4W + sNO3W +NearZero) * (ahNUptHelo + sNO3W +NearZero));
tNUptNH4HeloW = afNH4UptHeloW * tNUptHeloW;
tNUptNO3HeloW = tNUptHeloW - tNUptNH4HeloW;
aVNUptHeloS = oNDissS * aVNUptMaxCrHelo / (ahNUptHelo + oNDissS);
tNUptHeloS = aVNUptHeloS * aDRootHelo;
afNH4UptHeloS = oNH4S * oNO3S / ((ahNUptHelo + oNH4S +NearZero) * (ahNUptHelo + oNO3S +NearZero)) + oNH4S * ahNUptHelo / ((oNH4S + oNO3S+NearZero) * (ahNUptHelo + oNO3S+NearZero));
tNUptNH4HeloS = afNH4UptHeloS * tNUptHeloS;
tNUptNO3HeloS = tNUptHeloS - tNUptNH4HeloS;
tNUptHelo = tNUptHeloW + tNUptHeloS;
aLPAR1Helo = uLPAR0 * exp(- aExtCoefOpen * aDepth1Helo);
aLPAR2Helo = aLPAR1Helo * exp(- aExtCoef * (aDepth2Helo - aDepth1Helo));
uhLHelo = hLRefHelo * uFunTmProdHelo;
aLLimShootHelo = fEmergHelo + fFloatHelo * (1.0 - afCovEmergVeg) + bfSubHelo * (1.0 - afCovSurfVeg) * 1.0 / (aExtCoef * sDepthW) * log( (1.0 + aLPAR1Helo / uhLHelo) / (1.0 + aLPAR2Helo / uhLHelo));
aMuTmLHelo = ufDay * bfShootHelo * aLLimShootHelo * uFunTmProdHelo * cMuMaxHelo;
aPLimHelo = max(0.0, (1.0 - cPDHeloMin / (rPDHelo + NearZero)) * cPDHeloMax / (cPDHeloMax - cPDHeloMin));
aNLimHelo = max(0.0, (1.0 - cNDHeloMin / (rNDHelo + NearZero)) * cNDHeloMax / (cNDHeloMax - cNDHeloMin));
aNutLimHelo = min( aPLimHelo, aNLimHelo);
aMuHelo = aMuTmLHelo * aNutLimHelo;
if (Day < cDayWinHelo) 
bkMortHelo = kMortHeloSum 
elseif (Day < cDayWinHelo + cLengMort) 
bkMortHelo = - log(fWinHelo) / cLengMort 
else
bkMortHelo = kMortHeloSum 
end;
akDIncrHelo = aMuTmLHelo - kDRespHelo * uFunTmRespHelo - bkMortHelo;
tDEnvHelo = max(0.0, akDIncrHelo / (cDCarrHelo+NearZero) * sDHelo*sDHelo);
tDEnvProdHelo = aMuHelo / cMuMaxHelo * tDEnvHelo;
tDProdHelo = max(0.0, aMuHelo * sDHelo - tDEnvProdHelo);
tDProdSubHelo = bfSubHelo * tDProdHelo;
tDRespHelo = kDRespHelo * uFunTmRespHelo * sDHelo;
tDEnvMortHelo = tDEnvHelo - tDEnvProdHelo;
tDMortHelo = bkMortHelo * sDHelo + tDEnvMortHelo;
tDMortHeloW = fDetWMortHelo * (1.0 - bfRootHelo) * tDMortHelo;
tDMortHeloS = tDMortHelo - tDMortHeloW;
if ( (sTime >= cYearStartBirds * DaysPerYear) && (Day >= cDayStartBirds) && (Day <= cDayEndBirds) ) 
tDGrazHeloBird = cPrefHeloBird * sDHelo / (hDVegBird + sDHelo) * cBirdsPerha / m2Perha * cDGrazPerBird 
else
tDGrazHeloBird = 0.0 
end;
if ((Day >= cDayManVeg1 && Day < cDayManVeg1 + cLengMan) || (Day >= cDayManVeg2 && Day < cDayManVeg2 + cLengMan)) 
bkManHelo = -log(1.0 - fManHelo) / cLengMan 
else
bkManHelo = 0.0 
end;
tDManHelo = bkManHelo * sDHelo;
tPManHelo = rPDHelo * tDManHelo;
tNManHelo = rNDHelo * tDManHelo;
tDBedHelo = tDMigrHelo + tDProdHelo - tDRespHelo - tDMortHelo - tDGrazHeloBird - tDManHelo;
tO2ProdHelo = molO2molC * cCPerDW * tDProdHelo;
tO2RespHeloW = molO2molC * cCPerDW * bfSubHelo * tDRespHelo * aCorO2BOD;
tO2RespHeloS = molO2molC * cCPerDW * bfRootHelo * tDRespHelo * afOxySed;
tO2ProdHeloS = min (tO2RespHeloS, tO2ProdHelo);
tO2ProdHeloW = min( tO2ProdHelo - tO2ProdHeloS, bfSubHelo * tO2ProdHelo);
tO2UptNO3HeloW = O2PerNO3 * molO2molN * bfSubHelo * tNUptNO3HeloW;
tO2UptNO3HeloS = O2PerNO3 * molO2molN * tNUptNO3HeloS;
tPExcrHelo = (2.0*rPDHelo) / (cPDHeloMax + rPDHelo) * rPDHelo * tDRespHelo;
tPExcrHeloS = bfRootHelo * tPExcrHelo;
tPExcrHeloW = tPExcrHelo - tPExcrHeloS;
tPMortHelo = rPDHelo * tDMortHelo;
tPMortHeloPO4 = fDissMortVeg * tPMortHelo;
tPMortHeloPO4S = bfRootHelo * tPMortHeloPO4;
tPMortHeloPO4W = tPMortHeloPO4 - tPMortHeloPO4S;
tPMortHeloDet = tPMortHelo - tPMortHeloPO4;
tPMortHeloDetW = fDetWMortHelo * (1.0 - bfRootHelo) * tPMortHeloDet;
tPMortHeloDetS = tPMortHeloDet - tPMortHeloDetW;
tPGrazHeloBird = rPDHelo * tDGrazHeloBird;
tPBedHelo = tPMigrHelo + tPUptHelo - tPExcrHelo - tPMortHelo - tPGrazHeloBird - tPManHelo;
tNExcrHelo = (2.0*rNDHelo) / (cNDHeloMax + rNDHelo) * rNDHelo * tDRespHelo;
tNExcrHeloS = bfRootHelo * tNExcrHelo;
tNExcrHeloW = tNExcrHelo - tNExcrHeloS;
tNMortHelo = rNDHelo * tDMortHelo;
tNMortHeloNH4 = fDissMortVeg * tNMortHelo;
tNMortHeloNH4S = bfRootHelo * tNMortHeloNH4;
tNMortHeloNH4W = tNMortHeloNH4 - tNMortHeloNH4S;
tNMortHeloDet = tNMortHelo - tNMortHeloNH4;
tNMortHeloDetW = fDetWMortHelo * (1.0 - bfRootHelo) * tNMortHeloDet;
tNMortHeloDetS = tNMortHeloDet - tNMortHeloDetW;
tNGrazHeloBird = rNDHelo * tDGrazHeloBird;
tNBedHelo = tNMigrHelo + tNUptHelo - tNExcrHelo - tNMortHelo - tNGrazHeloBird - tNManHelo;
tDMigrVeg = tDMigrElod + tDMigrChar + tDMigrCera + tDMigrLemn + tDMigrNymp + tDMigrHelo;
tPMigrVeg = tPMigrElod + tPMigrChar + tPMigrCera + tPMigrLemn + tPMigrNymp + tPMigrHelo;
tNMigrVeg = tNMigrElod + tNMigrChar + tNMigrCera + tNMigrLemn + tNMigrNymp + tNMigrHelo;
tDProdVeg = tDProdElod + tDProdChar + tDProdCera + tDProdLemn + tDProdNymp + tDProdHelo;
tPUptVegW = tPUptElodW + tPUptCharW + tPUptCeraW + tPUptLemnW + tPUptNympW + tPUptHeloW;
tPUptVegS = tPUptElodS + tPUptCharS + tPUptCeraS + tPUptLemnS + tPUptNympS + tPUptHeloS;
tNUptNH4VegW = tNUptNH4ElodW + tNUptNH4CharW + tNUptNH4CeraW + tNUptNH4LemnW + tNUptNH4NympW + tNUptNH4HeloW;
tNUptNH4VegS = tNUptNH4ElodS + tNUptNH4CharS + tNUptNH4CeraS + tNUptNH4LemnS + tNUptNH4NympS + tNUptNH4HeloS;
tNUptNO3VegW = tNUptNO3ElodW + tNUptNO3CharW + tNUptNO3CeraW + tNUptNO3LemnW + tNUptNO3NympW + tNUptNO3HeloW;
tNUptNO3VegS = tNUptNO3ElodS + tNUptNO3CharS + tNUptNO3CeraS + tNUptNO3LemnS + tNUptNO3NympS + tNUptNO3HeloS;
tDRespVeg = tDRespElod + tDRespChar + tDRespCera + tDRespLemn + tDRespNymp + tDRespHelo;
tPExcrVegW = tPExcrElodW + tPExcrCharW + tPExcrCeraW + tPExcrLemnW + tPExcrNympW + tPExcrHeloW;
tPExcrVegS = tPExcrElodS + tPExcrCharS + tPExcrCeraS + tPExcrLemnS + tPExcrNympS + tPExcrHeloS;
tNExcrVegW = tNExcrElodW + tNExcrCharW + tNExcrCeraW + tNExcrLemnW + tNExcrNympW + tNExcrHeloW;
tNExcrVegS = tNExcrElodS + tNExcrCharS + tNExcrCeraS + tNExcrLemnS + tNExcrNympS + tNExcrHeloS;
tO2ProdVeg = tO2ProdElod + tO2ProdChar + tO2ProdCera + tO2ProdLemn + tO2ProdNymp + tO2ProdHelo;
tO2ProdVegW = tO2ProdElodW + tO2ProdCharW + tO2ProdCeraW + tO2ProdLemnW + tO2ProdNympW + tO2ProdHeloW;
tO2ProdVegS = tO2ProdElodS + tO2ProdCharS + tO2ProdCeraS + tO2ProdLemnS + tO2ProdNympS + tO2ProdHeloS;
tO2RespVegW = tO2RespElodW + tO2RespCharW + tO2RespCeraW + tO2RespLemnW + tO2RespNympW + tO2RespHeloW;
tO2RespVegS = tO2RespElodS + tO2RespCharS + tO2RespCeraS + tO2RespLemnS + tO2RespNympS + tO2RespHeloS;
tO2UptNO3VegW = tO2UptNO3ElodW + tO2UptNO3CharW + tO2UptNO3CeraW + tO2UptNO3LemnW + tO2UptNO3NympW + tO2UptNO3HeloW;
tO2UptNO3VegS = tO2UptNO3ElodS + tO2UptNO3CharS + tO2UptNO3CeraS + tO2UptNO3LemnS + tO2UptNO3NympS + tO2UptNO3HeloS;
tDMortVegW = tDMortElodW + tDMortCharW + tDMortCeraW + tDMortLemnW + tDMortNympW + tDMortHeloW;
tDMortVegS = tDMortElodS + tDMortCharS + tDMortCeraS + tDMortLemnS + tDMortNympS + tDMortHeloS;
tPMortVegPO4W = tPMortElodPO4W + tPMortCharPO4W + tPMortCeraPO4W + tPMortLemnPO4W + tPMortNympPO4W + tPMortHeloPO4W;
tPMortVegDetW = tPMortElodDetW + tPMortCharDetW + tPMortCeraDetW + tPMortLemnDetW + tPMortNympDetW + tPMortHeloDetW;
tPMortVegPO4S = tPMortElodPO4S + tPMortCharPO4S + tPMortCeraPO4S + tPMortLemnPO4S + tPMortNympPO4S + tPMortHeloPO4S;
tPMortVegDetS = tPMortElodDetS + tPMortCharDetS + tPMortCeraDetS + tPMortLemnDetS + tPMortNympDetS + tPMortHeloDetS;
tNMortVegNH4W = tNMortElodNH4W + tNMortCharNH4W + tNMortCeraNH4W + tNMortLemnNH4W + tNMortNympNH4W + tNMortHeloNH4W;
tNMortVegDetW = tNMortElodDetW + tNMortCharDetW + tNMortCeraDetW + tNMortLemnDetW + tNMortNympDetW + tNMortHeloDetW;
tNMortVegNH4S = tNMortElodNH4S + tNMortCharNH4S + tNMortCeraNH4S + tNMortLemnNH4S + tNMortNympNH4S + tNMortHeloNH4S;
tNMortVegDetS = tNMortElodDetS + tNMortCharDetS + tNMortCeraDetS + tNMortLemnDetS + tNMortNympDetS + tNMortHeloDetS;
tDGrazVegBird = tDGrazElodBird + tDGrazCharBird + tDGrazCeraBird + tDGrazLemnBird + tDGrazNympBird + tDGrazHeloBird;
tPGrazVegBird = tPGrazElodBird + tPGrazCharBird + tPGrazCeraBird + tPGrazLemnBird + tPGrazNympBird + tPGrazHeloBird;
tNGrazVegBird = tNGrazElodBird + tNGrazCharBird + tNGrazCeraBird + tNGrazLemnBird + tNGrazNympBird + tNGrazHeloBird;
tDManVeg = tDManElod + tDManChar + tDManCera + tDManLemn + tDManNymp + tDManHelo;
tPManVeg = tPManElod + tPManChar + tPManCera + tPManLemn + tPManNymp + tPManHelo;
tNManVeg = tNManElod + tNManChar + tNManCera + tNManLemn + tNManNymp + tNManHelo;
aCovSub = min(100.0,aCovElod + aCovChar + aCovCera);
tDAssVegBird = fDAssBird * tDGrazVegBird;
tDEgesBird = tDGrazVegBird - tDAssVegBird;
tPAssVegBird = fDAssBird * tPGrazVegBird;
tPEgesBird = tPGrazVegBird - tPAssVegBird;
tPEgesBirdPO4 = fDissEgesBird * tPEgesBird;
tPEgesBirdDet = tPEgesBird - tPEgesBirdPO4;
tNAssVegBird = fDAssBird * tNGrazVegBird;
tNEgesBird = tNGrazVegBird - tNAssVegBird;
tNEgesBirdNH4 = fDissEgesBird * tNEgesBird;
tNEgesBirdDet = tNEgesBird - tNEgesBirdNH4;
wDBedDetW = (tDMortVegW + tDEgesBird) / sDepthW;
tDBedDetS = tDMortVegS;
tDBedTotT = tDMigrVeg + tDProdVeg - tDRespVeg - tDManVeg - tDAssVegBird;
wPBedPO4W = (- tPUptVegW + tPExcrVegW + tPMortVegPO4W + tPEgesBirdPO4) /sDepthW;
wPBedDetW = (tPMortVegDetW + tPEgesBirdDet) / sDepthW;
tPBedPO4S = - tPUptVegS + tPExcrVegS + tPMortVegPO4S;
tPBedDetS = tPMortVegDetS;
tPBedTotT = tPMigrVeg - tPManVeg - tPAssVegBird;
wNBedNH4W = (- tNUptNH4VegW + tNExcrVegW + tNMortVegNH4W + tNEgesBirdNH4) / sDepthW;
wNBedNO3W = - tNUptNO3VegW / sDepthW;
wNBedDetW = (tNMortVegDetW + tNEgesBirdDet) / sDepthW;
tNBedNH4S = - tNUptNH4VegS + tNExcrVegS + tNMortVegNH4S;
tNBedNO3S = - tNUptNO3VegS;
tNBedDetS = tNMortVegDetS;
tNBedTotT = tNMigrVeg - tNManVeg - tNAssVegBird;
tO2BedW = tO2ProdVegW - tO2RespVegW + tO2UptNO3VegW;
tO2BedS = tO2ProdVegS - tO2RespVegS + tO2UptNO3VegS;
UseLoss = 1.0;
uFunTmLoss = exp(-0.5/(cSigTmLoss*cSigTmLoss) *(((uTm-cTmOptLoss)*(uTm-cTmOptLoss)) -(cTmRef-cTmOptLoss)*(cTmRef-cTmOptLoss)));
rPDPhytW = sPPhytW /(sDPhytW+NearZero);
rNDPhytW = sNPhytW /(sDPhytW+NearZero);
rPDPhytS = sPPhytS /(sDPhytS+NearZero);
rNDPhytS = sNPhytS /(sDPhytS+NearZero);
uFunTmPhyt = exp(-0.5/(cSigTmPhyt*cSigTmPhyt) *((uTm-cTmOptPhyt)*(uTm-cTmOptPhyt) - (cTmRef-cTmOptPhyt)*(cTmRef-cTmOptPhyt)));
uFunTmProdPhyt = uFunTmPhyt;
uFunTmRespPhyt = uFunTmPhyt;
aVPUptMaxCrPhyt = max(0.0,cVPUptMaxPhyt * uFunTmProdPhyt *(cPDPhytMax - rPDPhytW) /(cPDPhytMax - cPDPhytMin));
aVPUptPhyt = sPO4W * aVPUptMaxCrPhyt /(aVPUptMaxCrPhyt / cAffPUptPhyt + sPO4W);
wPUptPhyt = aVPUptPhyt * sDPhytW;
aVNUptMaxCrPhyt = max(0.0,cVNUptMaxPhyt * uFunTmProdPhyt * (cNDPhytMax - rNDPhytW) /(cNDPhytMax - cNDPhytMin));
ahNUptPhyt = aVNUptMaxCrPhyt / cAffNUptPhyt;
aVNUptPhyt = oNDissW * aVNUptMaxCrPhyt /(ahNUptPhyt + oNDissW);
wNUptPhyt = aVNUptPhyt * sDPhytW;
afNH4UptPhyt = sNH4W * sNO3W /((ahNUptPhyt + sNH4W) *(ahNUptPhyt + sNO3W)) + sNH4W * ahNUptPhyt /((sNH4W + sNO3W) *(ahNUptPhyt + sNO3W));
wNUptNH4Phyt = afNH4UptPhyt * wNUptPhyt;
wNUptNO3Phyt = wNUptPhyt - wNUptNH4Phyt;
uMuMaxTmPhyt = cMuMaxPhyt * uFunTmProdPhyt;
aPLimPhyt = max(0.0,(1.0 - cPDPhytMin / (rPDPhytW + NearZero)) * cPDPhytMax /(cPDPhytMax - cPDPhytMin));
aNLimPhyt = max(0.0,(1.0 - cNDPhytMin / (rNDPhytW + NearZero)) * cNDPhytMax /(cNDPhytMax - cNDPhytMin));
aLLimPhyt = UseSteelePhyt *(exp(1.0) /(aExtCoef * sDepthW) *(exp(- aLPARBot /(cLOptRefPhyt * uFunTmProdPhyt)) - exp(- uLPAR0 /(cLOptRefPhyt * uFunTmProdPhyt)))) +(1.0 - UseSteelePhyt) *(1.0 /(aExtCoef * sDepthW) * log((1.0 + uLPAR0 / (hLRefPhyt * uFunTmProdPhyt)) / (1.0 + aLPARBot /(hLRefPhyt * uFunTmProdPhyt))));
aMuTmLPhyt = ufDay *(1.0 - afCovSurfVeg) * aLLimPhyt * uMuMaxTmPhyt;
aNutLimPhyt = min(aPLimPhyt,aNLimPhyt);
aMuPhyt = aNutLimPhyt * aMuTmLPhyt;
wDAssPhyt = aMuPhyt*sDPhytW;
rChDPhyt = cChDPhytMax -(cChDPhytMax - cChDPhytMin) * aLLimPhyt;
oChlaPhyt = mgPerg * rChDPhyt * sDPhytW;
aExtChPhyt = cExtSpPhyt / rChDPhyt;
ukDRespTmPhyt = kDRespPhyt * uFunTmRespPhyt;
wDRespPhytW = ukDRespTmPhyt * sDPhytW;
ukLossTmPhyt = UseLoss * kLossPhyt * uFunTmLoss;
wDLossPhyt = ukLossTmPhyt * sDPhytW;
wDMortPhytW = kMortPhytW * sDPhytW;
uCorVSetPhyt = cVSetPhyt * aFunTauSetOM * uFunTmSet;
tDSetPhyt = uCorVSetPhyt * sDPhytW;
tDResusPhyt = sDPhytS /(aDPhytS+NearZero) * tDResusPhytTot;
tDRespPhytS = ukDRespTmPhyt * sDPhytS;
tDMortPhytS = kMortPhytS * sDPhytS;
ukDDecPhyt = ukDRespTmPhyt + ukLossTmPhyt + kMortPhytW +(uCorVSetPhyt * uFunTmSet) / sDepthW;
wPExcrPhytW = (2.0*rPDPhytW) /(cPDPhytMax + rPDPhytW) * rPDPhytW * wDRespPhytW;
wPLossPhyt = rPDPhytW * wDLossPhyt;
wPMortPhytW = wDMortPhytW * rPDPhytW;
tPSetPhyt = rPDPhytW * tDSetPhyt;
tPResusPhyt = rPDPhytS * tDResusPhyt;
tPExcrPhytS = (2.0*rPDPhytS) /(cPDPhytMax + rPDPhytS) * rPDPhytS * tDRespPhytS;
tPMortPhytS = tDMortPhytS * rPDPhytS;
wNExcrPhytW = (2.0*rNDPhytW) /(cNDPhytMax + rNDPhytW) * rNDPhytW * wDRespPhytW;
wNLossPhyt = rNDPhytW * wDLossPhyt;
wNMortPhytW = wDMortPhytW * rNDPhytW;
tNSetPhyt = rNDPhytW * tDSetPhyt;
tNResusPhyt = rNDPhytS * tDResusPhyt;
tNExcrPhytS = (2.0*rNDPhytS) /(cNDPhytMax + rNDPhytS) * rNDPhytS * tDRespPhytS;
tNMortPhytS = tDMortPhytS * rNDPhytS;
wDPrimPhytW = wDAssPhyt - wDRespPhytW - wDLossPhyt - wDMortPhytW -(tDSetPhyt - tDResusPhyt) / sDepthW;
wPPrimPhytW = wPUptPhyt - wPExcrPhytW - wPLossPhyt - wPMortPhytW -(tPSetPhyt - tPResusPhyt) / sDepthW;
wNPrimPhytW = wNUptPhyt - wNExcrPhytW - wNLossPhyt - wNMortPhytW -(tNSetPhyt - tNResusPhyt) / sDepthW;
tDPrimPhytS = tDSetPhyt - tDResusPhyt - tDMortPhytS - tDRespPhytS;
tPPrimPhytS = tPSetPhyt - tPResusPhyt - tPMortPhytS - tPExcrPhytS;
tNPrimPhytS = tNSetPhyt - tNResusPhyt - tNMortPhytS - tNExcrPhytS;
oChla = oChlaPhyt;
wDPrimDetW = wDMortPhytW + wDLossPhyt;
tDPrimDetS = tDMortPhytS;
tDPrimTotT = (wDAssPhyt - wDRespPhytW) * sDepthW - tDRespPhytS;
wO2ProdPhyt = molO2molC * cCPerDW * wDAssPhyt;
wO2RespPhytW = molO2molC * cCPerDW * wDRespPhytW * aCorO2BOD;
wO2UptNO3Phyt = O2PerNO3 * molO2molN * wNUptNO3Phyt;
wO2PrimW = wO2ProdPhyt - wO2RespPhytW + wO2UptNO3Phyt;
tO2RespPhytS = molO2molC * cCPerDW * tDRespPhytS * afOxySed;
tO2PrimS = tO2RespPhytS;
wPMortPhytPO4W = fDissMortPhyt * wPMortPhytW;
wPMortPhytDetW = wPMortPhytW - wPMortPhytPO4W;
wPLossPhytPO4 = fDissLoss * wPLossPhyt;
wPLossPhytDet = wPLossPhyt - wPLossPhytPO4;
wPPrimPO4W = - wPUptPhyt + wPExcrPhytW + wPLossPhytPO4 + wPMortPhytPO4W;
wPPrimDetW = wPLossPhytDet + wPMortPhytDetW;
tPMortPhytPO4S = fDissMortPhyt * tPMortPhytS;
tPMortPhytDetS = tPMortPhytS - tPMortPhytPO4S;
tPPrimDetS = tPMortPhytDetS;
tPPrimPO4S = tPExcrPhytS + tPMortPhytPO4S;
tPPrimTotT = 0.0;
wNMortPhytNH4W = fDissMortPhyt * wNMortPhytW;
wNMortPhytDetW = wNMortPhytW - wNMortPhytNH4W;
wNLossPhytNH4 = fDissLoss * wNLossPhyt;
wNLossPhytDet = wNLossPhyt - wNLossPhytNH4;
wNPrimNH4W = - wNUptNH4Phyt + wNExcrPhytW + wNLossPhytNH4 + wNMortPhytNH4W;
wNPrimNO3W = - wNUptNO3Phyt;
wNPrimDetW = wNLossPhytDet + wNMortPhytDetW;
tNMortPhytNH4S = fDissMortPhyt * tNMortPhytS;
tNMortPhytDetS = tNMortPhytS - tNMortPhytNH4S;
tNPrimNH4S = tNExcrPhytS + tNMortPhytNH4S;
tNPrimNO3S = 0.0;
tNPrimDetS = tNMortPhytDetS;
tNPrimTotT = 0.0;
aPACoef = cPACoefMin +(cPACoefMax - cPACoefMin) * hPACoef / (hPACoef + oDOMW);
bSecchiMax = sDepthW + cSecchiPlus;
aSecchi = min(bSecchiMax,aPACoef / aExtCoefOpen);
aDepthEuph = cEuph * aSecchi;
aRelDepthEuph = aDepthEuph / sDepthW;
aChlaH = oChla * sDepthW;
aCovPhytW = cCovSpPhyt *(oDPhytW * sDepthW);
rExtChPhyt = aExtPhyt /(oChla / mgPerg + NearZero);
tDSetTot = tDSetIM + tDSetDet + tDSetPhyt;
tPSetTot = tPSetAIM + tPSetDet + tPSetPhyt;
tNSetTot = tNSetDet + tNSetPhyt;
tDResusTot = tDResusDead + tDResusPhytTot;
tPResusTot = tPResusDet + tPResusAIM + tPResusPhyt + tPResusPO4;
tNResusTot = tNResusDet + tNResusNH4 + tNResusNO3 + tNResusPhyt;
if (sTime >= cDredStart * DaysPerYear) 
bTimeDred = (floor(TimeYears/cDredInterval) * cDredInterval) * DaysPerYear 
else
bTimeDred = -9999.999 
end;
if (sTime == bTimeDred) 
aDepthStart = sDepthW 
else
aDepthStart = aDepthStart 
end;
if ((sTime >= bTimeDred) && (sTime < bTimeDred + cLengDred) && (aDepthStart <= cDepthRef - cDepthS)) 
akDredDepth = (log(cDepthRef / aDepthStart)) / cLengDred 
else
akDredDepth = 0.0 
end;
if ((sTime >= bTimeDred) &&(sTime < bTimeDred + cLengDred) &&(aDepthStart <= cDepthRef - cDepthS)) 
akDred = (- log(1.0 - fEffDred)) / cLengDred 
else
akDred = 0.0 
end;
if ((sTime >= bTimeDred) &&(sTime < bTimeDred + cLengDred) &&(aDepthStart <= cDepthRef - cDepthS)) 
akDredLemn = (- log(1.0 - fEffDredLemn)) / cLengDred 
else
akDredLemn = 0.0 
end;
vDredDepthW = akDredDepth * sDepthW;
tDDredDetS = akDred * sDDetS;
tPDredDetS = akDred * sPDetS;
tNDredDetS = akDred * sNDetS;
tPDredAIMS = akDred * sPAIMS;
bRhoSolidSoil = fDOrgSoil * cRhoOM +(1 - fDOrgSoil) * cRhoIM;
tDDredNetSoil = -(tDDredDetS / cRhoOM) * bRhoSolidSoil;
tDDredNetIMS = (1 - fDOrgSoil) * tDDredNetSoil;
tDDredNetHumS = fDOrgSoil * tDDredNetSoil;
tPDredNetHumS = cPDSoilOM * tDDredNetHumS;
tNDredNetHumS = cNDSoilOM * tDDredNetHumS;
tDDredPhytS = akDred * sDPhytS;
tPDredPhytS = akDred * sPPhytS;
tNDredPhytS = akDred * sNPhytS;
tDDredElod = akDred * sDElod;
tPDredElod = akDred * sPElod;
tNDredElod = akDred * sNElod;
tDDredCera = akDred * sDCera;
tPDredCera = akDred * sPCera;
tNDredCera = akDred * sNCera;
tDDredChar = akDred * sDChar;
tPDredChar = akDred * sPChar;
tNDredChar = akDred * sNChar;
tDDredLemn = akDredLemn * sDLemn;
tPDredLemn = akDredLemn * sPLemn;
tNDredLemn = akDredLemn * sNLemn;
tDDredNymp = akDred * sDNymp;
tPDredNymp = akDred * sPNymp;
tNDredNymp = akDred * sNNymp;
tDDredHelo = akDred * sDHelo;
tPDredHelo = akDred * sPHelo;
tNDredHelo = akDred * sNHelo;
tDDredVeg = tDDredElod+tDDredCera+tDDredChar+tDDredLemn+tDDredNymp+tDDredHelo;
tPDredVeg = tPDredElod+tPDredCera+tPDredChar+tPDredLemn+tPDredNymp+tPDredHelo;
tNDredVeg = tNDredElod+tNDredCera+tNDredChar+tNDredLemn+tNDredNymp+tNDredHelo;
tDDredNetTot = tDDredDetS - tDDredNetSoil + tDDredPhytS + tDDredVeg;
tPDredNetTot = tPDredDetS - tPDredNetHumS + tPDredAIMS + tPDredPhytS + tPDredVeg;
tNDredNetTot = tNDredDetS - tNDredNetHumS + tNDredPhytS + tNDredVeg;
tDIMS = tDAbioIMS;
tDHumS = tDAbioHumS;
tDDetS = tDAbioDetS + tDPrimDetS + tDBedDetS;
vDeltaS = (tDIMS / cRhoIM +(tDHumS + tDDetS) / cRhoOM) /(1.0 - bPorS);
if (vDeltaS >= 0.0) 
tDBurIM = ((tDHumS + tDDetS) +(cRhoOM / cRhoIM) * tDIMS) / ((sDHumS + sDDetS) / sDIMS + cRhoOM / cRhoIM) 
else
tDBurIM = ((tDHumS + tDDetS) +(cRhoOM / cRhoIM) * tDIMS) / (fDOrgSoil /(1.0 - fDOrgSoil) + cRhoOM / cRhoIM) 
end;
if (vDeltaS >= 0.0) 
tDBurOM = (sDHumS + sDDetS) / sDIMS * tDBurIM 
else
tDBurOM = fDOrgSoil /(1.0 - fDOrgSoil) * tDBurIM 
end;
if (vDeltaS >= 0.0) 
tDBurDet = sDDetS /(sDHumS + sDDetS) * tDBurOM 
else
tDBurDet = 0.0 
end;
if (vDeltaS >= 0.0) 
tDBurHum = tDBurOM - tDBurDet 
else
tDBurHum = tDBurOM 
end;
if (vDeltaS >= 0.0) 
tDBurTot = tDBurIM + tDBurOM 
else
tDBurTot = tDBurIM + tDBurOM 
end;
if (vDeltaS >= 0.0) 
tPBurHum = rPDHumS * tDBurHum 
else
tPBurHum = cPDSoilOM * tDBurHum 
end;
if (vDeltaS >= 0.0) 
tPBurDet = rPDDetS * tDBurDet 
else
tPBurDet = 0.0 
end;
if (vDeltaS >= 0.0) 
tPBurAIM = sPAIMS / sDIMS * tDBurIM 
else
tPBurAIM = 0.0 
end;
if (vDeltaS >= 0.0) 
tPBurPO4 = sPO4S *(vDeltaS / cDepthS) 
else
tPBurPO4 = cPO4Ground *(bPorS * vDeltaS) 
end;
if (vDeltaS >= 0.0) 
tPBurTot = tPBurDet + tPBurHum + tPBurAIM + tPBurPO4 
else
tPBurTot = tPBurHum + tPBurAIM + tPBurPO4 
end;
if (vDeltaS >= 0.0) 
tNBurHum = rNDHumS * tDBurHum 
else
tNBurHum = cNDSoilOM * tDBurHum 
end;
if (vDeltaS >= 0.0) 
tNBurDet = rNDDetS * tDBurDet 
else
tNBurDet = 0.0 
end;
if (vDeltaS >= 0.0) 
tNBurNH4 = sNH4S *(vDeltaS / cDepthS) 
else
tNBurNH4 = cNH4Ground *(bPorS * vDeltaS) 
end;
if (vDeltaS >= 0.0) 
tNBurNO3 = sNO3S *(vDeltaS / cDepthS) 
else
tNBurNO3 = cNO3Ground *(bPorS * vDeltaS) 
end;
if (vDeltaS >= 0.0) 
tNBurTot = tNBurDet + tNBurHum + tNBurNH4 + tNBurNO3 
else
tNBurTot = tNBurHum + tNBurNH4 + tNBurNO3 
end;
if (ConstDepth == true ) 
vDeltaW = 0.0 
else
vDeltaW = - vDeltaS 
end;
aRelDeltaW = (vDeltaW + vDredDepthW) / sDepthW;
aDTotT =(sDIMW + sDDetW + sDPhytW) * sDepthW + aDVeg + sDIMS + sDHumS + sDDetS + aDPhytS;
aNTotT =(sNH4W + sNO3W + sNDetW + sNPhytW) * sDepthW + aNVeg + sNH4S + sNO3S + sNDetS + sNHumS + sNPhytS;
aPTotT =(sPO4W + sPDetW + sPPhytW + sPAIMW) * sDepthW + aPVeg + sPO4S + sPDetS + sPHumS + sPPhytS + sPAIMS;
aDError = aDTotT - sDExtTotT;
aNError = aNTotT - sNExtTotT;
aPError = aPTotT - sPExtTotT;
dDepthW = vDeltaW + vDredDepthW +vTranDepthW;
dPO4W = wPAbioPO4W + wPPrimPO4W + wPBedPO4W + cPBackLoad/sDepthW - aRelDeltaW * sPO4W + wPTranPO4W;
dPAIMW = wPAbioAIMW - aRelDeltaW * sPAIMW +wPTranAIMW;
dNH4W = wNAbioNH4W + wNPrimNH4W + wNBedNH4W + cNBackLoad/sDepthW - aRelDeltaW * sNH4W+wNTranNH4W;
dNO3W = wNAbioNO3W + wNPrimNO3W + wNBedNO3W - aRelDeltaW * sNO3W +wNTranNO3W;
dO2W = wO2AbioW + wO2PrimW + tO2BedW / sDepthW - aRelDeltaW * sO2W +wO2TranW;
dDIMW = wDAbioIMW - aRelDeltaW * sDIMW +wDTranIMW;
dDDetW = wDAbioDetW + wDPrimDetW + wDBedDetW - aRelDeltaW * sDDetW +wDTranDetW;
dPDetW = wPAbioDetW + wPPrimDetW + wPBedDetW - aRelDeltaW * sPDetW +wPTranDetW;
dNDetW = wNAbioDetW + wNPrimDetW + wNBedDetW - aRelDeltaW * sNDetW +wNTranDetW;
dDPhytW = wDPrimPhytW - aRelDeltaW * sDPhytW +wDTranPhyt;
dPPhytW = wPPrimPhytW - aRelDeltaW * sPPhytW +wPTranPhyt;
dNPhytW = wNPrimPhytW - aRelDeltaW * sNPhytW +wNTranPhyt;
dPO4S = tPAbioPO4S - tPBurPO4 + tPPrimPO4S + tPBedPO4S;
dPAIMS = tPAbioAIMS - tPBurAIM - tPDredAIMS;
dNH4S = tNAbioNH4S - tNBurNH4 + tNPrimNH4S + tNBedNH4S;
dNO3S = tNAbioNO3S - tNBurNO3 + tNPrimNO3S + tNBedNO3S;
dDIMS = tDAbioIMS - tDBurIM - tDDredNetIMS;
dDHumS = tDAbioHumS - tDBurHum - tDDredNetHumS;
dPHumS = tPAbioHumS - tPBurHum - tPDredNetHumS;
dNHumS = tNAbioHumS - tNBurHum - tNDredNetHumS;
dDDetS = tDAbioDetS - tDBurDet + tDPrimDetS + tDBedDetS - tDDredDetS;
dPDetS = tPAbioDetS - tPBurDet + tPPrimDetS + tPBedDetS - tPDredDetS;
dNDetS = tNAbioDetS - tNBurDet + tNPrimDetS + tNBedDetS - tNDredDetS;
dDPhytS = tDPrimPhytS - tDDredPhytS;
dPPhytS = tPPrimPhytS - tPDredPhytS;
dNPhytS = tNPrimPhytS - tNDredPhytS;
dDElod = tDBedElod - tDDredElod;
dPElod = tPBedElod - tPDredElod;
dNElod = tNBedElod - tNDredElod;
dDChar = tDBedChar - tDDredChar;
dPChar = tPBedChar - tPDredChar;
dNChar = tNBedChar - tNDredChar;
dDCera = tDBedCera - tDDredCera;
dPCera = tPBedCera - tPDredCera;
dNCera = tNBedCera - tNDredCera;
dDLemn = tDBedLemn - tDDredLemn;
dPLemn = tPBedLemn - tPDredLemn;
dNLemn = tNBedLemn - tNDredLemn;
dDNymp = tDBedNymp - tDDredNymp;
dPNymp = tPBedNymp - tPDredNymp;
dNNymp = tNBedNymp - tNDredNymp;
dDHelo = tDBedHelo - tDDredHelo;
dPHelo = tPBedHelo - tPDredHelo;
dNHelo = tNBedHelo - tNDredHelo;
dDExtTotT = uDLoad - wDOutflTot*sDepthW - tDBurTot + tDAbioTotT + tDPrimTotT + tDBedTotT - tDDredNetTot;
dNExtTotT = uNLoad - wNOutflTot*sDepthW + cNBackLoad - tNBurTot - tNDredNetTot + tNAbioTotT + tNPrimTotT + tNBedTotT;
dPExtTotT = uPLoad - wPOutflTot*sDepthW + cPBackLoad - tPBurTot - tPDredNetTot + tPAbioTotT + tPPrimTotT + tPBedTotT;
sDDetS' = dDDetS;
sDDetW' = dDDetW;
sDepthW' = dDepthW;
sDHumS' = dDHumS;
sDIMS' = dDIMS;
sDIMW' = dDIMW;
sNDetS' = dNDetS;
sNDetW' = dNDetW;
sNH4S' = dNH4S;
sNH4W' = dNH4W;
sNHumS' = dNHumS;
sNO3S' = dNO3S;
sNO3W' = dNO3W;
sO2W' = dO2W;
sPAIMS' = dPAIMS;
sPAIMW' = dPAIMW;
sPDetS' = dPDetS;
sPDetW' = dPDetW;
sPHumS' = dPHumS;
sPO4S' = dPO4S;
sPO4W' = dPO4W;
sDPhytW' = dDPhytW;
sPPhytW' = dPPhytW;
sNPhytW' = dNPhytW;
sDPhytS' = dDPhytS;
sPPhytS' = dPPhytS;
sNPhytS' = dNPhytS;
sDElod' = dDElod;
sDChar' = dDChar;
sDCera' = dDCera;
sDLemn' = dDLemn;
sDNymp' = dDNymp;
sDHelo' = dDHelo;
sPElod' = dPElod;
sPChar' = dPChar;
sPCera' = dPCera;
sPLemn' = dPLemn;
sPNymp' = dPNymp;
sPHelo' = dPHelo;
sNElod' = dNElod;
sNChar' = dNChar;
sNCera' = dNCera;
sNLemn' = dNLemn;
sNNymp' = dNNymp;
sNHelo' = dNHelo;
sDExtTotT' = dDExtTotT;
sNExtTotT' = dNExtTotT;
sPExtTotT' = dPExtTotT;
sDDetS = 363.4059807;
sDDetW = 2;
sDepthW = 0.5;
sDHumS = 3270.653827;
sDIMS = 32706.53827;
sDIMW = 5;
sNDetS = 9.085149518;
sNDetW = 0.05;
sNH4S = 0.02;
sNH4W = 0.1;
sNHumS = 163.5326913;
sNO3S = 0.002;
sNO3W = 0.1;
sO2W = 10;
sPAIMS = 17.98859605;
sPAIMW = 0;
sPDetS = 0.908514952;
sPDetW = 0.005;
sPHumS = 16.35326913;
sPO4S = 0.18170299;
sPO4W = 0.01;
sDPhytW = 1;
sPPhytW = 0.01;
sNPhytW = 0.1;
sDPhytS = 0.001;
sPPhytS = 0.00001;
sNPhytS = 0.0001;
sDElod = 1;
sDChar = 1;
sDCera = 1;
sDLemn = 1;
sDNymp = 1;
sDHelo = 1;
sPElod = 0.002;
sPChar = 0.002;
sPCera = 0.002;
sPLemn = 0.005;
sPNymp = 0.002;
sPHelo = 0.002;
sNElod = 0.02;
sNChar = 0.02;
sNCera = 0.02;
sNLemn = 0.05;
sNNymp = 0.02;
sNHelo = 0.02;
sDExtTotT = 0;
sNExtTotT = 0;
sPExtTotT = 0;
BeginTime = 0
ConstDepth = 1
ReadTemp = 0
ReadLOut = 0
ReadVWind = 0
InitCalc = 0
InclTran = 1
ReadQIn = 0
ReadQOut = 0
ReadQEv = 0
ReadPLoad = 0
ReadNLoad = 0
ReadNutFrac = 0
ReadPLoadPhyt = 0
ReadDLoadDet = 0
ReadDLoadIM = 0
UseSeasonLoad = 0
UsePulseLoad = 0
mTemp = 0
mLOut = 0
mVWind = 0
mQIn = 0
mQOut = 0
mQEv = 0
mPLoad = 0
mPLoadPO4 = 0
mPLoadOrg = 0
mPLoadPhytTot = 0
mNLoad = 0
mNLoadNH4 = 0
mNLoadNO3 = 0
mNLoadOrg = 0
mDLoadDet = 0
mDLoadIM = 0
fDTotS0 = 0.3
fDOrgS0 = 0.1
fDDetS0 = 0.1
fPInorgS0 = 0.0005
fPAdsS0 = 0.99
cPDDet0 = 0.0025
cNDDet0 = 0.025
cPDHum0 = 0.005
cNDHum0 = 0.05
cPDPhyt0 = 0.01
cNDPhyt0 = 0.1
cPDElod0 = 0.002
cNDElod0 = 0.02
cPDChar0 = 0.002
cNDChar0 = 0.02
cPDCera0 = 0.002
cNDCera0 = 0.02
cPDLemn0 = 0.005
cNDLemn0 = 0.05
cPDNymp0 = 0.002
cNDNymp0 = 0.02
cPDHelo0 = 0.002
cNDHelo0 = 0.02
cQInf = 0
cPBackLoad = 0
cNBackLoad = 0
cNLoadS = 0
fNH4LoadS = 0.5
cPO4Ground = 0.1
cNH4Ground = 1
cNO3Ground = 0.1
cQIn = 30
cQInSum = 30
cQInWin = 30
cDepthWMax = 3
cQInExtraApril1 = 0
cQInExtraOct1 = 0
cQOutExtraApril1 = 0
cQOutExtraOct1 = 0
cQEvAve = 1.5
cQEvVar = 1.3
cPLoad = 0.02
cPLoadSum = 0.02
cPLoadWin = 0.02
fPO4In = 0.8
fPhytInWin = 0.001
fPhytInSum = 0.002
cNLoad = 0.2
cNLoadSum = 0.2
cNLoadWin = 0.2
cNPLoadMeas = 7
cNPPhytIn = 7
cNPDetIn = 7
fNH4DissIn = 0.5
cNDPhytIn = 0.07
cNDDetIn = 0.07
cDIMIn = 10
cO2In = 5
cDredInterval = 9999000
cDredStart = 9999000
cDepthRef = 1E-28
cLengDred = 10
fEffDred = 0.95
fEffDredLemn = 0.5
cFetch = 0
cTmAve = 12
cTmVar = 10
cTimeLag = 40
cVWind = 5
cLDayAve = 10000000
cLDayVar = 8000000
cfDayAve = 0.5
cfDayVar = 0.2
fRefl = 0.2
fPAR = 0.48
cDayManVeg1 = -9999000
cDayManVeg2 = -9999000
fManVeg = 0.8
fManLemn = 0.4
fManHelo = 0.8
cLengMan = 10
cYearStartBirds = 0
cDayStartBirds = 46
cDayEndBirds = 288
cBirdsPerha = 0
cDGrazPerBird = 45
hDVegBird = 5
fDAssBird = 0.5
fDissEgesBird = 0.25
cDErosTot = 10
cExtWat = 0.5
cExtSpDet = 0.15
cExtSpIM = 0.05
cExtSpPhyt = 0.25
fDOrgSoil = 0.1
cPDSoilOM = 0.001
cNDSoilOM = 0.01
cDepthS = 0.1
fLutum = 0.1
fFeDIM = 0.01
fAlDIM = 0.01
cCPerDW = 0.4
cRhoIM = 2500000
cRhoOM = 1400000
cAerRoot = 0.727
cAerLin = -0.371
cAerSquare = 0.0376
cThetaAer = 1.024
kLemnAer = 0.01
fSedErosIM = 0.95
cVSetIM = 1
cVSetDet = 0.25
cThetaSet = 1.01
cSuspRef = 0.5
cSuspMin = 6.1
cSuspMax = 25.2
cSuspSlope = 2.1
hDepthSusp = 2
cFetchRef = 1000
fLutumRef = 0.2
kVegResus = 0.01
kResusPhytMax = 0.25
cResusPhytExp = -0.379
kPDifPO4 = 0.000072
kNDifNO3 = 0.000086
kNDifNH4 = 0.000112
kO2Dif = 0.000026
cThetaDif = 1.02
fDepthDifS = 0.5
cTurbDifNut = 5
cTurbDifO2 = 5
kPSorp = 0.05
cRelPAdsD = 0.00003
cRelPAdsFe = 0.065
cRelPAdsAl = 0.134
cKPAdsOx = 0.6
fRedMax = 0.9
coPO4Max = 2
kPChemPO4 = 0.03
cTmRef = 20
fRefrDetS = 0.15
cThetaMinW = 1.07
kDMinDetW = 0.01
hO2BOD = 1
cThetaMinS = 1.07
kDMinDetS = 0.002
kDMinHum = 0.00001
hNO3Denit = 2
NO3PerC = 0.8
kNitrW = 0.1
kNitrS = 1
cThetaNitr = 1.08
O2PerNH4 = 2
hO2Nitr = 2
fDissMortVeg = 0.25
cLengAllo = 15
cLengMort = 15
fRootElodSum = 0.1
fRootElodWin = 0.6
fFloatElod = 0
fEmergElod = 0
fDepth1Elod = 0
fDepth2Elod = 1
cDLayerElod = 0
cCovSpElod = 0.5
kMigrElod = 0.00001
cDElodIn = 0.1
cTmInitElod = 10
cDCarrElod = 500
cMuMaxElod = 0.32
cQ10ProdElod = 1.2
hLRefElod = 32
cExtSpElod = 0.01
kDRespElod = 0.024
cQ10RespElod = 1.5
cDayWinElod = 259
kMortElodSum = 0.005
fWinElod = 0.2
fDetWMortElod = 0.5
cPrefElodBird = 1
cVPUptMaxElod = 0.01
cAffPUptElod = 0.2
cPDElodMin = 0.0008
cPDElodMax = 0.0035
cVNUptMaxElod = 0.1
cAffNUptElod = 0.2
cNDElodMin = 0.01
cNDElodMax = 0.035
fRootCharSum = 0.05
fRootCharWin = 0.1
fFloatChar = 0
fEmergChar = 0
fDepth1Char = 0.5
fDepth2Char = 1
cDLayerChar = 0
cCovSpChar = 0.5
kMigrChar = 0.00001
cDCharIn = 0.1
cTmInitChar = 10
cDCarrChar = 500
cMuMaxChar = 0.22
cQ10ProdChar = 1.2
hLRefChar = 19
cExtSpChar = 0.01
kDRespChar = 0.025
cQ10RespChar = 1.2
cDayWinChar = 259
kMortCharSum = 0.005
fWinChar = 0.9
fDetWMortChar = 0.5
cPrefCharBird = 0.5
cVPUptMaxChar = 0.01
cAffPUptChar = 0.2
cPDCharMin = 0.0012
cPDCharMax = 0.0035
cVNUptMaxChar = 0.1
cAffNUptChar = 0.2
cNDCharMin = 0.01
cNDCharMax = 0.035
fRootCeraSum = 0
fRootCeraWin = 0
fFloatCera = 0
fEmergCera = 0
fDepth1Cera = 0
fDepth2Cera = 0.5
cDLayerCera = 0
cCovSpCera = 0.5
kMigrCera = 0.00001
cDCeraIn = 0.1
cTmInitCera = 10
cDCarrCera = 500
cMuMaxCera = 0.21
cQ10ProdCera = 1.5
hLRefCera = 25
cExtSpCera = 0.01
kDRespCera = 0.024
cQ10RespCera = 2
cDayWinCera = 259
kMortCeraSum = 0.005
fWinCera = 0.1
fDetWMortCera = 0.5
cPrefCeraBird = 0
cVPUptMaxCera = 0.01
cAffPUptCera = 0.2
cPDCeraMin = 0.0012
cPDCeraMax = 0.0035
cVNUptMaxCera = 0.1
cAffNUptCera = 0.2
cNDCeraMin = 0.01
cNDCeraMax = 0.033
fObstrLemn = 1
fRootLemnSum = 0
fRootLemnWin = 0
fFloatLemn = 1
fEmergLemn = 0
fDepth1Lemn = 0
fDepth2Lemn = 0
cDLayerLemn = 100
cCovSpLemn = 1
ckMigrLemn = 0.00001
cDLemnIn = 0.1
cTmInitLemn = 10
cDCarrLemn = 575
cMuMaxLemn = 0.4
cQ10ProdLemn = 2.5
hLRefLemn = 7.5
cExtSpLemn = 0.01
kDRespLemn = 0.03
cQ10RespLemn = 3
cDayWinLemn = 289
kMortLemnSum = 0.02
fWinLemn = 0.2
fDetWMortLemn = 0.8
cPrefLemnBird = 0
cVPUptMaxLemn = 0.005
cAffPUptLemn = 0.02
cPDLemnMin = 0.004
cPDLemnMax = 0.026
cVNUptMaxLemn = 0.05
cAffNUptLemn = 0.02
cNDLemnMin = 0.04
cNDLemnMax = 0.1
fRootNympSum = 0.75
fRootNympWin = 0.95
fFloatNymp = 1
fEmergNymp = 0
fDepth1Nymp = 0
fDepth2Nymp = 0
cDLayerNymp = 100
cCovSpNymp = 0.5
kMigrNymp = 0.00001
cDNympIn = 0.1
cTmInitNymp = 10
cDCarrNymp = 500
cMuMaxNymp = 0.1
cQ10ProdNymp = 1.5
hLRefNymp = 25
cExtSpNymp = 0.01
kDRespNymp = 0.01
cQ10RespNymp = 2
cDayWinNymp = 259
kMortNympSum = 0.005
fWinNymp = 0.333
fDetWMortNymp = 0.25
cPrefNympBird = 0
cVPUptMaxNymp = 0.01
cAffPUptNymp = 0.2
cPDNympMin = 0.001
cPDNympMax = 0.0075
cVNUptMaxNymp = 0.1
cAffNUptNymp = 0.2
cNDNympMin = 0.01
cNDNympMax = 0.03
fRootHeloSum = 0.5
fRootHeloWin = 0.8
fFloatHelo = 0
fEmergHelo = 1
fDepth1Helo = 0
fDepth2Helo = 0
cDLayerHelo = 0
cCovSpHelo = 0.05
kMigrHelo = 0.00001
cDHeloIn = 0.1
cTmInitHelo = 10
cDCarrHelo = 2000
cMuMaxHelo = 0.1
cQ10ProdHelo = 1.5
hLRefHelo = 25
cExtSpHelo = 0.01
kDRespHelo = 0.01
cQ10RespHelo = 2
cDayWinHelo = 259
kMortHeloSum = 0.005
fWinHelo = 0.333
fDetWMortHelo = 0.25
cPrefHeloBird = 0
cVPUptMaxHelo = 0.01
cAffPUptHelo = 0.2
cPDHeloMin = 0.001
cPDHeloMax = 0.0075
cVNUptMaxHelo = 0.1
cAffNUptHelo = 0.2
cNDHeloMin = 0.01
cNDHeloMax = 0.03
cPACoefMin = 1.5
cPACoefMax = 2.5
hPACoef = 3
cSecchiPlus = 0
cEuph = 1.7
cCovSpPhyt = 2
cTmOptLoss = 25
cSigTmLoss = 13
fDissMortPhyt = 0.2
fDissLoss = 0.25
cMuMaxPhyt = 1.9
cTmOptPhyt = 25
cSigTmPhyt = 15
UseSteelePhyt = 0
hLRefPhyt = 10.2
cLOptRefPhyt = 1000
cChDPhytMin = 0.01
cChDPhytMax = 0.02
kDRespPhyt = 0.1
kLossPhyt = 0
kMortPhytW = 0.01
cVSetPhyt = 0.1
kMortPhytS = 0.05
cVPUptMaxPhyt = 0.01
cAffPUptPhyt = 0.2
cPDPhytMin = 0.002
cPDPhytMax = 0.015
cVNUptMaxPhyt = 0.07
cAffNUptPhyt = 0.2
cNDPhytMin = 0.02
cNDPhytMax = 0.1
O2PerNO3 = 1.5
cDayApril1 = 91
cDayOct1 = 273
cLengChange = 10
DaysPerYear = 365
TenDays = 10
SecsPerDay = 86400
mmPerm = 1000
m2Perha = 10000
mgPerg = 1000
PerCent = 0.01
NearZero = 1E-28
molO2molC = 2.6667
molO2molN = 2.2857
molNmolC = 1.1667
cRhoWat = 1000000
Pi = 3.14159265358979
